/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcomponents%2FPayPalProviderWrapper.tsx&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcontext%2FCartContext.tsx&server=false!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcomponents%2FPayPalProviderWrapper.tsx&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcontext%2FCartContext.tsx&server=false! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/PayPalProviderWrapper.tsx */ \"(app-pages-browser)/./src/components/PayPalProviderWrapper.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/context/CartContext.tsx */ \"(app-pages-browser)/./src/context/CartContext.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRmhlbGxvc2F1cmklMkZEb3dubG9hZHMlMkZwcm9qZWN0JTIwMiUyRnNyYyUyRmFwcCUyRmdsb2JhbHMuY3NzJm1vZHVsZXM9JTJGVXNlcnMlMkZoZWxsb3NhdXJpJTJGRG93bmxvYWRzJTJGcHJvamVjdCUyMDIlMkZzcmMlMkZjb21wb25lbnRzJTJGUGF5UGFsUHJvdmlkZXJXcmFwcGVyLnRzeCZtb2R1bGVzPSUyRlVzZXJzJTJGaGVsbG9zYXVyaSUyRkRvd25sb2FkcyUyRnByb2plY3QlMjAyJTJGc3JjJTJGY29udGV4dCUyRkNhcnRDb250ZXh0LnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLG9LQUE4RjtBQUM5Riw4TUFBbUg7QUFDbkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9mODg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL2hlbGxvc2F1cmkvRG93bmxvYWRzL3Byb2plY3QgMi9zcmMvYXBwL2dsb2JhbHMuY3NzXCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvaGVsbG9zYXVyaS9Eb3dubG9hZHMvcHJvamVjdCAyL3NyYy9jb21wb25lbnRzL1BheVBhbFByb3ZpZGVyV3JhcHBlci50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9oZWxsb3NhdXJpL0Rvd25sb2Fkcy9wcm9qZWN0IDIvc3JjL2NvbnRleHQvQ2FydENvbnRleHQudHN4XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcomponents%2FPayPalProviderWrapper.tsx&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcontext%2FCartContext.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BraintreePayPalButtons: function() { return /* binding */ BraintreePayPalButtons; },\n/* harmony export */   DISPATCH_ACTION: function() { return /* binding */ DISPATCH_ACTION; },\n/* harmony export */   FUNDING: function() { return /* binding */ FUNDING; },\n/* harmony export */   PAYPAL_HOSTED_FIELDS_TYPES: function() { return /* binding */ PAYPAL_HOSTED_FIELDS_TYPES; },\n/* harmony export */   PayPalButtons: function() { return /* binding */ PayPalButtons; },\n/* harmony export */   PayPalCVVField: function() { return /* binding */ PayPalCVVField; },\n/* harmony export */   PayPalCardFieldsContext: function() { return /* binding */ PayPalCardFieldsContext; },\n/* harmony export */   PayPalCardFieldsForm: function() { return /* binding */ PayPalCardFieldsForm; },\n/* harmony export */   PayPalCardFieldsProvider: function() { return /* binding */ PayPalCardFieldsProvider; },\n/* harmony export */   PayPalExpiryField: function() { return /* binding */ PayPalExpiryField; },\n/* harmony export */   PayPalHostedField: function() { return /* binding */ PayPalHostedField; },\n/* harmony export */   PayPalHostedFieldsProvider: function() { return /* binding */ PayPalHostedFieldsProvider; },\n/* harmony export */   PayPalMarks: function() { return /* binding */ PayPalMarks; },\n/* harmony export */   PayPalMessages: function() { return /* binding */ PayPalMessages; },\n/* harmony export */   PayPalNameField: function() { return /* binding */ PayPalNameField; },\n/* harmony export */   PayPalNumberField: function() { return /* binding */ PayPalNumberField; },\n/* harmony export */   PayPalScriptProvider: function() { return /* binding */ PayPalScriptProvider; },\n/* harmony export */   SCRIPT_LOADING_STATE: function() { return /* binding */ SCRIPT_LOADING_STATE; },\n/* harmony export */   ScriptContext: function() { return /* binding */ ScriptContext; },\n/* harmony export */   destroySDKScript: function() { return /* binding */ destroySDKScript; },\n/* harmony export */   getScriptID: function() { return /* binding */ getScriptID; },\n/* harmony export */   scriptReducer: function() { return /* binding */ scriptReducer; },\n/* harmony export */   usePayPalCardFields: function() { return /* binding */ usePayPalCardFields; },\n/* harmony export */   usePayPalHostedFields: function() { return /* binding */ usePayPalHostedFields; },\n/* harmony export */   usePayPalScriptReducer: function() { return /* binding */ usePayPalScriptReducer; },\n/* harmony export */   useScriptProviderContext: function() { return /* binding */ useScriptProviderContext; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/*!\n * react-paypal-js v8.8.3 (2025-04-11T19:50:46.506Z)\n * Copyright 2020-present, PayPal, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$();\n\n/**\n * Enum for the SDK script resolve status,\n *\n * @enum {string}\n */ var SCRIPT_LOADING_STATE;\n(function(SCRIPT_LOADING_STATE) {\n    SCRIPT_LOADING_STATE[\"INITIAL\"] = \"initial\";\n    SCRIPT_LOADING_STATE[\"PENDING\"] = \"pending\";\n    SCRIPT_LOADING_STATE[\"REJECTED\"] = \"rejected\";\n    SCRIPT_LOADING_STATE[\"RESOLVED\"] = \"resolved\";\n})(SCRIPT_LOADING_STATE || (SCRIPT_LOADING_STATE = {}));\n/**\n * Enum for the PayPalScriptProvider context dispatch actions\n *\n * @enum {string}\n */ var DISPATCH_ACTION;\n(function(DISPATCH_ACTION) {\n    DISPATCH_ACTION[\"LOADING_STATUS\"] = \"setLoadingStatus\";\n    DISPATCH_ACTION[\"RESET_OPTIONS\"] = \"resetOptions\";\n    DISPATCH_ACTION[\"SET_BRAINTREE_INSTANCE\"] = \"braintreeInstance\";\n})(DISPATCH_ACTION || (DISPATCH_ACTION = {}));\n/**\n * Enum for all the available hosted fields\n *\n * @enum {string}\n */ var PAYPAL_HOSTED_FIELDS_TYPES;\n(function(PAYPAL_HOSTED_FIELDS_TYPES) {\n    PAYPAL_HOSTED_FIELDS_TYPES[\"NUMBER\"] = \"number\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"CVV\"] = \"cvv\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"EXPIRATION_DATE\"] = \"expirationDate\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"EXPIRATION_MONTH\"] = \"expirationMonth\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"EXPIRATION_YEAR\"] = \"expirationYear\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"POSTAL_CODE\"] = \"postalCode\";\n})(PAYPAL_HOSTED_FIELDS_TYPES || (PAYPAL_HOSTED_FIELDS_TYPES = {}));\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest$1(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n/*********************************************\n * Common reference to the script identifier *\n *********************************************/ // keep this script id value in kebab-case format\nvar SCRIPT_ID = \"data-react-paypal-script-id\";\nvar SDK_SETTINGS = {\n    DATA_CLIENT_TOKEN: \"dataClientToken\",\n    DATA_JS_SDK_LIBRARY: \"dataJsSdkLibrary\",\n    DATA_LIBRARY_VALUE: \"react-paypal-js\",\n    DATA_NAMESPACE: \"dataNamespace\",\n    DATA_SDK_INTEGRATION_SOURCE: \"dataSdkIntegrationSource\",\n    DATA_USER_ID_TOKEN: \"dataUserIdToken\"\n};\nvar LOAD_SCRIPT_ERROR = \"Failed to load the PayPal JS SDK script.\";\n/****************************\n * Braintree error messages *\n ****************************/ var EMPTY_BRAINTREE_AUTHORIZATION_ERROR_MESSAGE = \"Invalid authorization data. Use dataClientToken or dataUserIdToken to authorize.\";\nvar braintreeVersion = \"3.117.0\";\nvar BRAINTREE_SOURCE = \"https://js.braintreegateway.com/web/\".concat(braintreeVersion, \"/js/client.min.js\");\nvar BRAINTREE_PAYPAL_CHECKOUT_SOURCE = \"https://js.braintreegateway.com/web/\".concat(braintreeVersion, \"/js/paypal-checkout.min.js\");\n/*********************\n * PayPal namespaces *\n *********************/ var DEFAULT_PAYPAL_NAMESPACE = \"paypal\";\nvar DEFAULT_BRAINTREE_NAMESPACE = \"braintree\";\n/*****************\n * Hosted Fields *\n *****************/ var HOSTED_FIELDS_CHILDREN_ERROR = \"To use HostedFields you must use it with at least 3 children with types: [number, cvv, expirationDate] includes\";\nvar HOSTED_FIELDS_DUPLICATE_CHILDREN_ERROR = \"Cannot use duplicate HostedFields as children\";\n/*******************\n * Script Provider *\n *******************/ var SCRIPT_PROVIDER_REDUCER_ERROR = \"usePayPalScriptReducer must be used within a PayPalScriptProvider\";\nvar CARD_FIELDS_DUPLICATE_CHILDREN_ERROR = \"Cannot use duplicate CardFields as children\";\nvar CARD_FIELDS_CONTEXT_ERROR = \"Individual CardFields must be rendered inside the PayPalCardFieldsProvider\";\n/**\n * Get the namespace from the window in the browser\n * this is useful to get the paypal object from window\n * after load PayPal SDK script\n *\n * @param namespace the name space to return\n * @returns the namespace if exists or undefined otherwise\n */ function getPayPalWindowNamespace$1(namespace) {\n    if (namespace === void 0) {\n        namespace = DEFAULT_PAYPAL_NAMESPACE;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window[namespace];\n}\n/**\n * Get a namespace from the window in the browser\n * this is useful to get the braintree from window\n * after load Braintree script\n *\n * @param namespace the name space to return\n * @returns the namespace if exists or undefined otherwise\n */ function getBraintreeWindowNamespace(namespace) {\n    if (namespace === void 0) {\n        namespace = DEFAULT_BRAINTREE_NAMESPACE;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window[namespace];\n}\n/**\n * Creates a string hash code based on the string argument\n *\n * @param str the source input string to hash\n * @returns string hash code\n */ function hashStr(str) {\n    var hash = \"\";\n    for(var i = 0; i < str.length; i++){\n        var total = str[i].charCodeAt(0) * i;\n        if (str[i + 1]) {\n            total += str[i + 1].charCodeAt(0) * (i - 1);\n        }\n        hash += String.fromCharCode(97 + Math.abs(total) % 26);\n    }\n    return hash;\n}\nfunction generateErrorMessage(_a) {\n    var reactComponentName = _a.reactComponentName, sdkComponentKey = _a.sdkComponentKey, _b = _a.sdkRequestedComponents, sdkRequestedComponents = _b === void 0 ? \"\" : _b, _c = _a.sdkDataNamespace, sdkDataNamespace = _c === void 0 ? DEFAULT_PAYPAL_NAMESPACE : _c;\n    var requiredOptionCapitalized = sdkComponentKey.charAt(0).toUpperCase().concat(sdkComponentKey.substring(1));\n    var errorMessage = \"Unable to render <\".concat(reactComponentName, \" /> because window.\").concat(sdkDataNamespace, \".\").concat(requiredOptionCapitalized, \" is undefined.\");\n    // The JS SDK only loads the buttons component by default.\n    // All other components like messages and marks must be requested using the \"components\" query parameter\n    var requestedComponents = typeof sdkRequestedComponents === \"string\" ? sdkRequestedComponents : sdkRequestedComponents.join(\",\");\n    if (!requestedComponents.includes(sdkComponentKey)) {\n        var expectedComponents = [\n            requestedComponents,\n            sdkComponentKey\n        ].filter(Boolean).join();\n        errorMessage += \"\\nTo fix the issue, add '\".concat(sdkComponentKey, \"' to the list of components passed to the parent PayPalScriptProvider:\") + \"\\n`<PayPalScriptProvider options={{ components: '\".concat(expectedComponents, \"'}}>`.\");\n    }\n    return errorMessage;\n}\n/**\n * Generate a new random identifier for react-paypal-js\n *\n * @returns the {@code string} containing the random library name\n */ function getScriptID(options) {\n    // exclude the data-react-paypal-script-id value from the options hash\n    var _a = options, _b = SCRIPT_ID;\n    _a[_b];\n    var paypalScriptOptions = __rest$1(_a, [\n        _b + \"\"\n    ]);\n    return \"react-paypal-js-\".concat(hashStr(JSON.stringify(paypalScriptOptions)));\n}\n/**\n * Destroy the PayPal SDK from the document page\n *\n * @param reactPayPalScriptID the script identifier\n */ function destroySDKScript(reactPayPalScriptID) {\n    var scriptNode = self.document.querySelector(\"script[\".concat(SCRIPT_ID, '=\"').concat(reactPayPalScriptID, '\"]'));\n    if (scriptNode === null || scriptNode === void 0 ? void 0 : scriptNode.parentNode) {\n        scriptNode.parentNode.removeChild(scriptNode);\n    }\n}\n/**\n * Reducer function to handle complex state changes on the context\n *\n * @param state  the current state on the context object\n * @param action the action to be executed on the previous state\n * @returns a the same state if the action wasn't found, or a new state otherwise\n */ function scriptReducer(state, action) {\n    var _a, _b;\n    switch(action.type){\n        case DISPATCH_ACTION.LOADING_STATUS:\n            if (typeof action.value === \"object\") {\n                return __assign(__assign({}, state), {\n                    loadingStatus: action.value.state,\n                    loadingStatusErrorMessage: action.value.message\n                });\n            }\n            return __assign(__assign({}, state), {\n                loadingStatus: action.value\n            });\n        case DISPATCH_ACTION.RESET_OPTIONS:\n            // destroy existing script to make sure only one script loads at a time\n            destroySDKScript(state.options[SCRIPT_ID]);\n            return __assign(__assign({}, state), {\n                loadingStatus: SCRIPT_LOADING_STATE.PENDING,\n                options: __assign(__assign((_a = {}, _a[SDK_SETTINGS.DATA_SDK_INTEGRATION_SOURCE] = SDK_SETTINGS.DATA_LIBRARY_VALUE, _a), action.value), (_b = {}, _b[SCRIPT_ID] = \"\".concat(getScriptID(action.value)), _b))\n            });\n        case DISPATCH_ACTION.SET_BRAINTREE_INSTANCE:\n            return __assign(__assign({}, state), {\n                braintreePayPalCheckoutInstance: action.value\n            });\n        default:\n            {\n                return state;\n            }\n    }\n}\n// Create the React context to use in the script provider component\nvar ScriptContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n/**\n * Check if the context is valid and ready to dispatch actions.\n *\n * @param scriptContext the result of connecting to the context provider\n * @returns strict context avoiding null values in the type\n */ function validateReducer(scriptContext) {\n    if (typeof (scriptContext === null || scriptContext === void 0 ? void 0 : scriptContext.dispatch) === \"function\" && scriptContext.dispatch.length !== 0) {\n        return scriptContext;\n    }\n    throw new Error(SCRIPT_PROVIDER_REDUCER_ERROR);\n}\n/**\n * Check if the dataClientToken or the dataUserIdToken are\n * set in the options of the context.\n * @type dataClientToken is use to pass a client token\n * @type dataUserIdToken is use to pass a client tokenization key\n *\n * @param scriptContext the result of connecting to the context provider\n * @throws an {@link Error} if both dataClientToken and the dataUserIdToken keys are null or undefined\n * @returns strict context if one of the keys are defined\n */ var validateBraintreeAuthorizationData = function(scriptContext) {\n    var _a, _b;\n    if (!((_a = scriptContext === null || scriptContext === void 0 ? void 0 : scriptContext.options) === null || _a === void 0 ? void 0 : _a[SDK_SETTINGS.DATA_CLIENT_TOKEN]) && !((_b = scriptContext === null || scriptContext === void 0 ? void 0 : scriptContext.options) === null || _b === void 0 ? void 0 : _b[SDK_SETTINGS.DATA_USER_ID_TOKEN])) {\n        throw new Error(EMPTY_BRAINTREE_AUTHORIZATION_ERROR_MESSAGE);\n    }\n    return scriptContext;\n};\n/**\n * Custom hook to get access to the Script context and\n * dispatch actions to modify the state on the {@link ScriptProvider} component\n *\n * @returns a tuple containing the state of the context and\n * a dispatch function to modify the state\n */ function usePayPalScriptReducer() {\n    _s();\n    var scriptContext = validateReducer((0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ScriptContext));\n    var derivedStatusContext = __assign(__assign({}, scriptContext), {\n        isInitial: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.INITIAL,\n        isPending: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.PENDING,\n        isResolved: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.RESOLVED,\n        isRejected: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.REJECTED\n    });\n    return [\n        derivedStatusContext,\n        scriptContext.dispatch\n    ];\n}\n_s(usePayPalScriptReducer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n/**\n * Custom hook to get access to the ScriptProvider context\n *\n * @returns the latest state of the context\n */ function useScriptProviderContext() {\n    _s1();\n    var scriptContext = validateBraintreeAuthorizationData(validateReducer((0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ScriptContext)));\n    return [\n        scriptContext,\n        scriptContext.dispatch\n    ];\n}\n_s1(useScriptProviderContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n// Create the React context to use in the PayPal hosted fields provider\nvar PayPalHostedFieldsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n/**\n * Custom hook to get access to the PayPal Hosted Fields instance.\n * The instance represent the returned object after the render process\n * With this object a user can submit the fields and dynamically modify the cards\n *\n * @returns the hosted fields instance if is available in the component\n */ function usePayPalHostedFields() {\n    _s2();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PayPalHostedFieldsContext);\n}\n_s2(usePayPalHostedFields, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction useProxyProps(props) {\n    _s3();\n    var proxyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Proxy({}, {\n        get: function(target, prop, receiver) {\n            /**\n       *\n       * If target[prop] is a function, return a function that accesses\n       * this function off the target object. We can mutate the target with\n       * new copies of this function without having to re-render the\n       * SDK components to pass new callbacks.\n       *\n       * */ if (typeof target[prop] === \"function\") {\n                return function() {\n                    var args = [];\n                    for(var _i = 0; _i < arguments.length; _i++){\n                        args[_i] = arguments[_i];\n                    }\n                    // eslint-disable-next-line @typescript-eslint/ban-types\n                    return target[prop].apply(target, args);\n                };\n            }\n            return Reflect.get(target, prop, receiver);\n        }\n    }));\n    proxyRef.current = Object.assign(proxyRef.current, props);\n    return proxyRef.current;\n}\n_s3(useProxyProps, \"JpwNi8l7KAnHJ5DPUe55Sz0WE3w=\");\n/**\nThis `<PayPalButtons />` component supports rendering [buttons](https://developer.paypal.com/docs/business/javascript-sdk/javascript-sdk-reference/#buttons) for PayPal, Venmo, and alternative payment methods.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n*/ var PayPalButtons = function(_a) {\n    _s4();\n    var _b;\n    var _c = _a.className, className = _c === void 0 ? \"\" : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, children = _a.children, _e = _a.forceReRender, forceReRender = _e === void 0 ? [] : _e, buttonProps = __rest$1(_a, [\n        \"className\",\n        \"disabled\",\n        \"children\",\n        \"forceReRender\"\n    ]);\n    var isDisabledStyle = disabled ? {\n        opacity: 0.38\n    } : {};\n    var classNames = \"\".concat(className, \" \").concat(disabled ? \"paypal-buttons-disabled\" : \"\").trim();\n    var buttonsContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var buttons = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var proxyProps = useProxyProps(buttonProps);\n    var _f = usePayPalScriptReducer()[0], isResolved = _f.isResolved, options = _f.options;\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), initActions = _g[0], setInitActions = _g[1];\n    var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isEligible = _h[0], setIsEligible = _h[1];\n    var _j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _j[1];\n    function closeButtonsComponent() {\n        if (buttons.current !== null) {\n            buttons.current.close().catch(function() {\n            // ignore errors when closing the component\n            });\n        }\n    }\n    if ((_b = buttons.current) === null || _b === void 0 ? void 0 : _b.updateProps) {\n        buttons.current.updateProps({\n            message: buttonProps.message\n        });\n    }\n    // useEffect hook for rendering the buttons\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // verify the sdk script has successfully loaded\n        if (isResolved === false) {\n            return closeButtonsComponent;\n        }\n        var paypalWindowNamespace = getPayPalWindowNamespace$1(options.dataNamespace);\n        // verify dependency on window object\n        if (paypalWindowNamespace === undefined || paypalWindowNamespace.Buttons === undefined) {\n            setErrorState(function() {\n                throw new Error(generateErrorMessage({\n                    reactComponentName: PayPalButtons.displayName,\n                    sdkComponentKey: \"buttons\",\n                    sdkRequestedComponents: options.components,\n                    sdkDataNamespace: options[SDK_SETTINGS.DATA_NAMESPACE]\n                }));\n            });\n            return closeButtonsComponent;\n        }\n        var decoratedOnInit = function(data, actions) {\n            setInitActions(actions);\n            if (typeof buttonProps.onInit === \"function\") {\n                buttonProps.onInit(data, actions);\n            }\n        };\n        try {\n            buttons.current = paypalWindowNamespace.Buttons(__assign(__assign({}, proxyProps), {\n                onInit: decoratedOnInit\n            }));\n        } catch (err) {\n            return setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalButtons /> component. Failed to initialize:  \".concat(err));\n            });\n        }\n        // only render the button when eligible\n        if (buttons.current.isEligible() === false) {\n            setIsEligible(false);\n            return closeButtonsComponent;\n        }\n        if (!buttonsContainerRef.current) {\n            return closeButtonsComponent;\n        }\n        buttons.current.render(buttonsContainerRef.current).catch(function(err) {\n            // component failed to render, possibly because it was closed or destroyed.\n            if (buttonsContainerRef.current === null || buttonsContainerRef.current.children.length === 0) {\n                // paypal buttons container is no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // paypal buttons container is still in the DOM\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalButtons /> component. \".concat(err));\n            });\n        });\n        return closeButtonsComponent;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, __spreadArray(__spreadArray([\n        isResolved\n    ], forceReRender, true), [\n        buttonProps.fundingSource\n    ], false));\n    // useEffect hook for managing disabled state\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (initActions === null) {\n            return;\n        }\n        if (disabled === true) {\n            initActions.disable().catch(function() {\n            // ignore errors when disabling the component\n            });\n        } else {\n            initActions.enable().catch(function() {\n            // ignore errors when enabling the component\n            });\n        }\n    }, [\n        disabled,\n        initActions\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, isEligible ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: buttonsContainerRef,\n        style: isDisabledStyle,\n        className: classNames\n    }) : children);\n};\n_s4(PayPalButtons, \"wB0I4apJSjkCogCerahXHhNO9Zg=\", false, function() {\n    return [\n        useProxyProps,\n        usePayPalScriptReducer,\n        usePayPalScriptReducer,\n        usePayPalScriptReducer\n    ];\n});\n_c = PayPalButtons;\nPayPalButtons.displayName = \"PayPalButtons\";\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction findScript(url, attributes) {\n    var currentScript = document.querySelector('script[src=\"'.concat(url, '\"]'));\n    if (currentScript === null) return null;\n    var nextScript = createScriptElement(url, attributes);\n    var currentScriptClone = currentScript.cloneNode();\n    delete currentScriptClone.dataset.uidAuto;\n    if (Object.keys(currentScriptClone.dataset).length !== Object.keys(nextScript.dataset).length) {\n        return null;\n    }\n    var isExactMatch = true;\n    Object.keys(currentScriptClone.dataset).forEach(function(key) {\n        if (currentScriptClone.dataset[key] !== nextScript.dataset[key]) {\n            isExactMatch = false;\n        }\n    });\n    return isExactMatch ? currentScript : null;\n}\nfunction insertScriptElement(_a) {\n    var url = _a.url, attributes = _a.attributes, onSuccess = _a.onSuccess, onError = _a.onError;\n    var newScript = createScriptElement(url, attributes);\n    newScript.onerror = onError;\n    newScript.onload = onSuccess;\n    document.head.insertBefore(newScript, document.head.firstElementChild);\n}\nfunction processOptions(_a) {\n    var customSdkBaseUrl = _a.sdkBaseUrl, environment = _a.environment, options = __rest(_a, [\n        \"sdkBaseUrl\",\n        \"environment\"\n    ]);\n    var sdkBaseUrl = customSdkBaseUrl || processSdkBaseUrl(environment);\n    var optionsWithStringIndex = options;\n    var _b = Object.keys(optionsWithStringIndex).filter(function(key) {\n        return typeof optionsWithStringIndex[key] !== \"undefined\" && optionsWithStringIndex[key] !== null && optionsWithStringIndex[key] !== \"\";\n    }).reduce(function(accumulator, key) {\n        var value = optionsWithStringIndex[key].toString();\n        key = camelCaseToKebabCase(key);\n        if (key.substring(0, 4) === \"data\" || key === \"crossorigin\") {\n            accumulator.attributes[key] = value;\n        } else {\n            accumulator.queryParams[key] = value;\n        }\n        return accumulator;\n    }, {\n        queryParams: {},\n        attributes: {}\n    }), queryParams = _b.queryParams, attributes = _b.attributes;\n    if (queryParams[\"merchant-id\"] && queryParams[\"merchant-id\"].indexOf(\",\") !== -1) {\n        attributes[\"data-merchant-id\"] = queryParams[\"merchant-id\"];\n        queryParams[\"merchant-id\"] = \"*\";\n    }\n    return {\n        url: \"\".concat(sdkBaseUrl, \"?\").concat(objectToQueryString(queryParams)),\n        attributes: attributes\n    };\n}\nfunction camelCaseToKebabCase(str) {\n    var replacer = function(match, indexOfMatch) {\n        return (indexOfMatch ? \"-\" : \"\") + match.toLowerCase();\n    };\n    return str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, replacer);\n}\nfunction objectToQueryString(params) {\n    var queryString = \"\";\n    Object.keys(params).forEach(function(key) {\n        if (queryString.length !== 0) queryString += \"&\";\n        queryString += key + \"=\" + params[key];\n    });\n    return queryString;\n}\nfunction processSdkBaseUrl(environment) {\n    return environment === \"sandbox\" ? \"https://www.sandbox.paypal.com/sdk/js\" : \"https://www.paypal.com/sdk/js\";\n}\nfunction createScriptElement(url, attributes) {\n    if (attributes === void 0) {\n        attributes = {};\n    }\n    var newScript = document.createElement(\"script\");\n    newScript.src = url;\n    Object.keys(attributes).forEach(function(key) {\n        newScript.setAttribute(key, attributes[key]);\n        if (key === \"data-csp-nonce\") {\n            newScript.setAttribute(\"nonce\", attributes[\"data-csp-nonce\"]);\n        }\n    });\n    return newScript;\n}\nfunction loadScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) {\n        PromisePonyfill = Promise;\n    }\n    validateArguments(options, PromisePonyfill);\n    if (typeof document === \"undefined\") return PromisePonyfill.resolve(null);\n    var _a = processOptions(options), url = _a.url, attributes = _a.attributes;\n    var namespace = attributes[\"data-namespace\"] || \"paypal\";\n    var existingWindowNamespace = getPayPalWindowNamespace(namespace);\n    if (!attributes[\"data-js-sdk-library\"]) {\n        attributes[\"data-js-sdk-library\"] = \"paypal-js\";\n    }\n    if (findScript(url, attributes) && existingWindowNamespace) {\n        return PromisePonyfill.resolve(existingWindowNamespace);\n    }\n    return loadCustomScript({\n        url: url,\n        attributes: attributes\n    }, PromisePonyfill).then(function() {\n        var newWindowNamespace = getPayPalWindowNamespace(namespace);\n        if (newWindowNamespace) {\n            return newWindowNamespace;\n        }\n        throw new Error(\"The window.\".concat(namespace, \" global variable is not available.\"));\n    });\n}\nfunction loadCustomScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) {\n        PromisePonyfill = Promise;\n    }\n    validateArguments(options, PromisePonyfill);\n    var url = options.url, attributes = options.attributes;\n    if (typeof url !== \"string\" || url.length === 0) {\n        throw new Error(\"Invalid url.\");\n    }\n    if (typeof attributes !== \"undefined\" && typeof attributes !== \"object\") {\n        throw new Error(\"Expected attributes to be an object.\");\n    }\n    return new PromisePonyfill(function(resolve, reject) {\n        if (typeof document === \"undefined\") return resolve();\n        insertScriptElement({\n            url: url,\n            attributes: attributes,\n            onSuccess: function() {\n                return resolve();\n            },\n            onError: function() {\n                var defaultError = new Error('The script \"'.concat(url, '\" failed to load. Check the HTTP status code and response body in DevTools to learn more.'));\n                return reject(defaultError);\n            }\n        });\n    });\n}\nfunction getPayPalWindowNamespace(namespace) {\n    return window[namespace];\n}\nfunction validateArguments(options, PromisePonyfill) {\n    if (typeof options !== \"object\" || options === null) {\n        throw new Error(\"Expected an options object.\");\n    }\n    var environment = options.environment;\n    if (environment && environment !== \"production\" && environment !== \"sandbox\") {\n        throw new Error('The `environment` option must be either \"production\" or \"sandbox\".');\n    }\n    if (typeof PromisePonyfill !== \"undefined\" && typeof PromisePonyfill !== \"function\") {\n        throw new Error(\"Expected PromisePonyfill to be a function.\");\n    }\n}\n/**\n * Simple check to determine if the Braintree is a valid namespace.\n *\n * @param braintreeSource the source {@link BraintreeNamespace}\n * @returns a boolean representing if the namespace is valid.\n */ var isValidBraintreeNamespace = function(braintreeSource) {\n    var _a, _b;\n    if (typeof ((_a = braintreeSource === null || braintreeSource === void 0 ? void 0 : braintreeSource.client) === null || _a === void 0 ? void 0 : _a.create) !== \"function\" && typeof ((_b = braintreeSource === null || braintreeSource === void 0 ? void 0 : braintreeSource.paypalCheckout) === null || _b === void 0 ? void 0 : _b.create) !== \"function\") {\n        throw new Error(\"The braintreeNamespace property is not a valid BraintreeNamespace type.\");\n    }\n    return true;\n};\n/**\n * Use `actions.braintree` to provide an interface for the paypalCheckoutInstance\n * through the createOrder, createBillingAgreement and onApprove callbacks\n *\n * @param braintreeButtonProps the component button options\n * @returns a new copy of the component button options casted as {@link PayPalButtonsComponentProps}\n */ var decorateActions = function(buttonProps, payPalCheckoutInstance) {\n    var createOrderRef = buttonProps.createOrder;\n    var createBillingAgreementRef = buttonProps.createBillingAgreement;\n    var onApproveRef = buttonProps.onApprove;\n    if (typeof createOrderRef === \"function\") {\n        buttonProps.createOrder = function(data, actions) {\n            return createOrderRef(data, __assign(__assign({}, actions), {\n                braintree: payPalCheckoutInstance\n            }));\n        };\n    }\n    if (typeof createBillingAgreementRef === \"function\") {\n        buttonProps.createBillingAgreement = function(data, actions) {\n            return createBillingAgreementRef(data, __assign(__assign({}, actions), {\n                braintree: payPalCheckoutInstance\n            }));\n        };\n    }\n    if (typeof onApproveRef === \"function\") {\n        buttonProps.onApprove = function(data, actions) {\n            return onApproveRef(data, __assign(__assign({}, actions), {\n                braintree: payPalCheckoutInstance\n            }));\n        };\n    }\n    return __assign({}, buttonProps);\n};\n/**\n * Get the Braintree namespace from the component props.\n * If the prop `braintreeNamespace` is undefined will try to load it from the CDN.\n * This function allows users to set the braintree manually on the `BraintreePayPalButtons` component.\n *\n * Use case can be for example legacy sites using AMD/UMD modules,\n * trying to integrate the `BraintreePayPalButtons` component.\n * If we attempt to load the Braintree from the CDN won't define the braintree namespace.\n * This happens because the braintree script is an UMD module.\n * After detecting the AMD on the global scope will create an anonymous module using `define`\n * and the `BraintreePayPalButtons` won't be able to get access to the `window.braintree` namespace\n * from the global context.\n *\n * @param braintreeSource the source {@link BraintreeNamespace}\n * @returns the {@link BraintreeNamespace}\n */ var getBraintreeNamespace = function(braintreeSource) {\n    if (braintreeSource && isValidBraintreeNamespace(braintreeSource)) {\n        return Promise.resolve(braintreeSource);\n    }\n    return Promise.all([\n        loadCustomScript({\n            url: BRAINTREE_SOURCE\n        }),\n        loadCustomScript({\n            url: BRAINTREE_PAYPAL_CHECKOUT_SOURCE\n        })\n    ]).then(function() {\n        return getBraintreeWindowNamespace();\n    });\n};\n/**\nThis `<BraintreePayPalButtons />` component renders the [Braintree PayPal Buttons](https://developer.paypal.com/braintree/docs/guides/paypal/overview) for Braintree Merchants.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n\nNote: You are able to make your integration using the client token or using the tokenization key.\n\n- To use the client token integration set the key `dataClientToken` in the `PayPayScriptProvider` component's options.\n- To use the tokenization key integration set the key `dataUserIdToken` in the `PayPayScriptProvider` component's options.\n*/ var BraintreePayPalButtons = function(_a) {\n    _s5();\n    var _b = _a.className, className = _b === void 0 ? \"\" : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, children = _a.children, _d = _a.forceReRender, forceReRender = _d === void 0 ? [] : _d, braintreeNamespace = _a.braintreeNamespace, merchantAccountId = _a.merchantAccountId, buttonProps = __rest$1(_a, [\n        \"className\",\n        \"disabled\",\n        \"children\",\n        \"forceReRender\",\n        \"braintreeNamespace\",\n        \"merchantAccountId\"\n    ]);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    var _f = useScriptProviderContext(), providerContext = _f[0], dispatch = _f[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        getBraintreeNamespace(braintreeNamespace).then(function(braintree) {\n            var clientTokenizationKey = providerContext.options[SDK_SETTINGS.DATA_USER_ID_TOKEN];\n            var clientToken = providerContext.options[SDK_SETTINGS.DATA_CLIENT_TOKEN];\n            return braintree.client.create({\n                authorization: clientTokenizationKey || clientToken\n            }).then(function(clientInstance) {\n                var merchantProp = merchantAccountId ? {\n                    merchantAccountId: merchantAccountId\n                } : {};\n                return braintree.paypalCheckout.create(__assign(__assign({}, merchantProp), {\n                    client: clientInstance\n                }));\n            }).then(function(paypalCheckoutInstance) {\n                dispatch({\n                    type: DISPATCH_ACTION.SET_BRAINTREE_INSTANCE,\n                    value: paypalCheckoutInstance\n                });\n            });\n        }).catch(function(err) {\n            setErrorState(function() {\n                throw new Error(\"\".concat(LOAD_SCRIPT_ERROR, \" \").concat(err));\n            });\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        providerContext.options\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, providerContext.braintreePayPalCheckoutInstance && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalButtons, __assign({\n        className: className,\n        disabled: disabled,\n        forceReRender: forceReRender\n    }, decorateActions(buttonProps, providerContext.braintreePayPalCheckoutInstance)), children));\n};\n_s5(BraintreePayPalButtons, \"oz79vl6X5hOzDYoWk+I2izyZ6qQ=\", false, function() {\n    return [\n        useScriptProviderContext,\n        useScriptProviderContext,\n        useScriptProviderContext\n    ];\n});\n_c1 = BraintreePayPalButtons;\n/**\nThe `<PayPalMarks />` component is used for conditionally rendering different payment options using radio buttons.\nThe [Display PayPal Buttons with other Payment Methods guide](https://developer.paypal.com/docs/business/checkout/add-capabilities/buyer-experience/#display-paypal-buttons-with-other-payment-methods) describes this style of integration in detail.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n\nThis component can also be configured to use a single funding source similar to the [standalone buttons](https://developer.paypal.com/docs/business/checkout/configure-payments/standalone-buttons/) approach.\nA `FUNDING` object is exported by this library which has a key for every available funding source option.\n*/ var PayPalMarks = function(_a) {\n    _s6();\n    var _b = _a.className, className = _b === void 0 ? \"\" : _b, children = _a.children, markProps = __rest$1(_a, [\n        \"className\",\n        \"children\"\n    ]);\n    var _c = usePayPalScriptReducer()[0], isResolved = _c.isResolved, options = _c.options;\n    var markContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isEligible = _d[0], setIsEligible = _d[1];\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    /**\n   * Render PayPal Mark into the DOM\n   */ var renderPayPalMark = function(mark) {\n        var current = markContainerRef.current;\n        // only render the mark when eligible\n        if (!current || !mark.isEligible()) {\n            return setIsEligible(false);\n        }\n        // Remove any children before render it again\n        if (current.firstChild) {\n            current.removeChild(current.firstChild);\n        }\n        mark.render(current).catch(function(err) {\n            // component failed to render, possibly because it was closed or destroyed.\n            if (current === null || current.children.length === 0) {\n                // paypal marks container is no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // paypal marks container is still in the DOM\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalMarks /> component. \".concat(err));\n            });\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // verify the sdk script has successfully loaded\n        if (isResolved === false) {\n            return;\n        }\n        var paypalWindowNamespace = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE]);\n        // verify dependency on window object\n        if (paypalWindowNamespace === undefined || paypalWindowNamespace.Marks === undefined) {\n            return setErrorState(function() {\n                throw new Error(generateErrorMessage({\n                    reactComponentName: PayPalMarks.displayName,\n                    sdkComponentKey: \"marks\",\n                    sdkRequestedComponents: options.components,\n                    sdkDataNamespace: options[SDK_SETTINGS.DATA_NAMESPACE]\n                }));\n            });\n        }\n        renderPayPalMark(paypalWindowNamespace.Marks(__assign({}, markProps)));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isResolved,\n        markProps.fundingSource\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, isEligible ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: markContainerRef,\n        className: className\n    }) : children);\n};\n_s6(PayPalMarks, \"gJDujUysats6yxp4qob0emRzYsU=\", false, function() {\n    return [\n        usePayPalScriptReducer,\n        usePayPalScriptReducer,\n        usePayPalScriptReducer\n    ];\n});\n_c2 = PayPalMarks;\nPayPalMarks.displayName = \"PayPalMarks\";\n/**\nThis `<PayPalMessages />` messages component renders a credit messaging on upstream merchant sites.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n*/ var PayPalMessages = function(_a) {\n    _s7();\n    var _b = _a.className, className = _b === void 0 ? \"\" : _b, _c = _a.forceReRender, forceReRender = _c === void 0 ? [] : _c, messageProps = __rest$1(_a, [\n        \"className\",\n        \"forceReRender\"\n    ]);\n    var _d = usePayPalScriptReducer()[0], isResolved = _d.isResolved, options = _d.options;\n    var messagesContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var messages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // verify the sdk script has successfully loaded\n        if (isResolved === false) {\n            return;\n        }\n        var paypalWindowNamespace = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE]);\n        // verify dependency on window object\n        if (paypalWindowNamespace === undefined || paypalWindowNamespace.Messages === undefined) {\n            return setErrorState(function() {\n                throw new Error(generateErrorMessage({\n                    reactComponentName: PayPalMessages.displayName,\n                    sdkComponentKey: \"messages\",\n                    sdkRequestedComponents: options.components,\n                    sdkDataNamespace: options[SDK_SETTINGS.DATA_NAMESPACE]\n                }));\n            });\n        }\n        messages.current = paypalWindowNamespace.Messages(__assign({}, messageProps));\n        messages.current.render(messagesContainerRef.current).catch(function(err) {\n            // component failed to render, possibly because it was closed or destroyed.\n            if (messagesContainerRef.current === null || messagesContainerRef.current.children.length === 0) {\n                // paypal messages container is no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // paypal messages container is still in the DOM\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalMessages /> component. \".concat(err));\n            });\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, __spreadArray([\n        isResolved\n    ], forceReRender, true));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: messagesContainerRef,\n        className: className\n    });\n};\n_s7(PayPalMessages, \"xGMiGcPqGY6d3/Qsl9YErLmYt64=\", false, function() {\n    return [\n        usePayPalScriptReducer,\n        usePayPalScriptReducer,\n        usePayPalScriptReducer\n    ];\n});\n_c3 = PayPalMessages;\nPayPalMessages.displayName = \"PayPalMessages\";\n/**\nThis `<PayPalScriptProvider />` component takes care of loading the JS SDK `<script>`.\nIt manages state for script loading so children components like `<PayPalButtons />` know when it's safe to use the `window.paypal` global namespace.\n\nNote: You always should use this component as a wrapper for  `PayPalButtons`, `PayPalMarks`, `PayPalMessages` and `BraintreePayPalButtons` components.\n */ var PayPalScriptProvider = function(_a) {\n    _s8();\n    var _b;\n    var _c = _a.options, options = _c === void 0 ? {\n        clientId: \"test\"\n    } : _c, children = _a.children, _d = _a.deferLoading, deferLoading = _d === void 0 ? false : _d;\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(scriptReducer, {\n        options: __assign(__assign({}, options), (_b = {}, _b[SDK_SETTINGS.DATA_JS_SDK_LIBRARY] = SDK_SETTINGS.DATA_LIBRARY_VALUE, _b[SDK_SETTINGS.DATA_SDK_INTEGRATION_SOURCE] = SDK_SETTINGS.DATA_LIBRARY_VALUE, _b[SCRIPT_ID] = \"\".concat(getScriptID(options)), _b)),\n        loadingStatus: deferLoading ? SCRIPT_LOADING_STATE.INITIAL : SCRIPT_LOADING_STATE.PENDING\n    }), state = _e[0], dispatch = _e[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (deferLoading === false && state.loadingStatus === SCRIPT_LOADING_STATE.INITIAL) {\n            return dispatch({\n                type: DISPATCH_ACTION.LOADING_STATUS,\n                value: SCRIPT_LOADING_STATE.PENDING\n            });\n        }\n        if (state.loadingStatus !== SCRIPT_LOADING_STATE.PENDING) {\n            return;\n        }\n        var isSubscribed = true;\n        loadScript(state.options).then(function() {\n            if (isSubscribed) {\n                dispatch({\n                    type: DISPATCH_ACTION.LOADING_STATUS,\n                    value: SCRIPT_LOADING_STATE.RESOLVED\n                });\n            }\n        }).catch(function(err) {\n            console.error(\"\".concat(LOAD_SCRIPT_ERROR, \" \").concat(err));\n            if (isSubscribed) {\n                dispatch({\n                    type: DISPATCH_ACTION.LOADING_STATUS,\n                    value: {\n                        state: SCRIPT_LOADING_STATE.REJECTED,\n                        message: String(err)\n                    }\n                });\n            }\n        });\n        return function() {\n            isSubscribed = false;\n        };\n    }, [\n        state.options,\n        deferLoading,\n        state.loadingStatus\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ScriptContext.Provider, {\n        value: __assign(__assign({}, state), {\n            dispatch: dispatch\n        })\n    }, children);\n};\n_s8(PayPalScriptProvider, \"jO/4XIbRguTf4NYBEyiQnzprLmg=\");\n_c4 = PayPalScriptProvider;\n/**\n * Custom hook to store registered hosted fields children\n * Each `PayPalHostedField` component should be registered on the parent provider\n *\n * @param initialValue the initially registered components\n * @returns at first, an {@link Object} containing the registered hosted fields,\n * and at the second a function handler to register the hosted fields components\n */ var useHostedFieldsRegister = function(initialValue) {\n    _s9();\n    if (initialValue === void 0) {\n        initialValue = {};\n    }\n    var registeredFields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialValue);\n    var registerHostedField = function(component) {\n        registeredFields.current = __assign(__assign({}, registeredFields.current), component);\n    };\n    return [\n        registeredFields,\n        registerHostedField\n    ];\n};\n_s9(useHostedFieldsRegister, \"rTCCGqzjnSEp+SjQ9Mr1yVTXSh8=\");\n/**\n * Throw an exception if the HostedFields is not found in the paypal namespace\n * Probably cause for this problem is not sending the hosted-fields string\n * as part of the components props in options\n * {@code <PayPalScriptProvider options={{ components: 'hosted-fields'}}>}\n *\n * @param param0 and object containing the components and namespace defined in options\n * @throws {@code Error}\n *\n */ var generateMissingHostedFieldsError = function(_a) {\n    var _b = _a.components, components = _b === void 0 ? \"\" : _b, _c = SDK_SETTINGS.DATA_NAMESPACE, _d = _a[_c], dataNamespace = _d === void 0 ? DEFAULT_PAYPAL_NAMESPACE : _d;\n    var expectedComponents = components ? \"\".concat(components, \",hosted-fields\") : \"hosted-fields\";\n    var errorMessage = \"Unable to render <PayPalHostedFieldsProvider /> because window.\".concat(dataNamespace, \".HostedFields is undefined.\");\n    if (!components.includes(\"hosted-fields\")) {\n        errorMessage += \"\\nTo fix the issue, add 'hosted-fields' to the list of components passed to the parent PayPalScriptProvider: <PayPalScriptProvider options={{ components: '\".concat(expectedComponents, \"'}}>\");\n    }\n    return errorMessage;\n};\n/**\n * Validate the expiration date component. Valid combinations are:\n * 1- Only the `expirationDate` field exists.\n * 2- Only the `expirationMonth` and `expirationYear` fields exist. Cannot be used with the `expirationDate` field.\n *\n * @param registerTypes\n * @returns @type {true} when the children are valid\n */ var validateExpirationDate = function(registerTypes) {\n    return !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.EXPIRATION_DATE) && !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.EXPIRATION_MONTH) && !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.EXPIRATION_YEAR);\n};\n/**\n * Check if we find the [number, expiration, cvv] in children\n *\n * @param requiredChildren the list with required children [number, expiration, cvv]\n * @param registerTypes    the list of all the children types pass to the parent\n * @throw an @type {Error} when not find the default children\n */ var hasDefaultChildren = function(registerTypes) {\n    if (!registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.NUMBER) || !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.CVV) || validateExpirationDate(registerTypes)) {\n        throw new Error(HOSTED_FIELDS_CHILDREN_ERROR);\n    }\n};\n/**\n * Check if we don't have duplicate children types\n *\n * @param registerTypes the list of all the children types pass to the parent\n * @throw an @type {Error} when duplicate types was found\n */ var noDuplicateChildren = function(registerTypes) {\n    if (registerTypes.length !== new Set(registerTypes).size) {\n        throw new Error(HOSTED_FIELDS_DUPLICATE_CHILDREN_ERROR);\n    }\n};\n/**\n * Validate the hosted field children in the PayPalHostedFieldsProvider component.\n * These are the rules:\n * 1- We need to find 3 default children for number, expiration, cvv\n * 2- No duplicate children are allowed\n * 3- No invalid combinations of `expirationDate`, `expirationMonth`, and `expirationYear`\n *\n * @param childrenList     the list of children\n * @param requiredChildren the list with required children [number, expiration, cvv]\n */ var validateHostedFieldChildren = function(registeredFields) {\n    hasDefaultChildren(registeredFields);\n    noDuplicateChildren(registeredFields);\n};\n/**\nThis `<PayPalHostedFieldsProvider />` provider component wraps the form field elements and accepts props like `createOrder()`.\n\nThis provider component is designed to be used with the `<PayPalHostedField />` component.\n\nWarning: If you don't see anything in the screen probably your client is ineligible.\nTo handle this problem make sure to use the prop `notEligibleError` and pass a component with a custom message.\nTake a look to this link if that is the case: https://developer.paypal.com/docs/checkout/advanced/integrate/\n*/ var PayPalHostedFieldsProvider = function(_a) {\n    _s10();\n    var styles = _a.styles, createOrder = _a.createOrder, notEligibleError = _a.notEligibleError, children = _a.children, installments = _a.installments;\n    var _b = useScriptProviderContext()[0], options = _b.options, loadingStatus = _b.loadingStatus;\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isEligible = _c[0], setIsEligible = _c[1];\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), cardFields = _d[0], setCardFields = _d[1];\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    var hostedFieldsContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var hostedFields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var _f = useHostedFieldsRegister(), registeredFields = _f[0], registerHostedField = _f[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a;\n        validateHostedFieldChildren(Object.keys(registeredFields.current));\n        // Only render the hosted fields when script is loaded and hostedFields is eligible\n        if (!(loadingStatus === SCRIPT_LOADING_STATE.RESOLVED)) {\n            return;\n        }\n        // Get the hosted fields from the [window.paypal.HostedFields] SDK\n        hostedFields.current = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE]).HostedFields;\n        if (!hostedFields.current) {\n            throw new Error(generateMissingHostedFieldsError((_a = {\n                components: options.components\n            }, _a[SDK_SETTINGS.DATA_NAMESPACE] = options[SDK_SETTINGS.DATA_NAMESPACE], _a)));\n        }\n        if (!hostedFields.current.isEligible()) {\n            return setIsEligible(false);\n        }\n        // Clean all the fields before the rerender\n        if (cardFields) {\n            cardFields.teardown();\n        }\n        hostedFields.current.render({\n            // Call your server to set up the transaction\n            createOrder: createOrder,\n            fields: registeredFields.current,\n            installments: installments,\n            styles: styles\n        }).then(function(cardFieldsInstance) {\n            if (hostedFieldsContainerRef.current) {\n                setCardFields(cardFieldsInstance);\n            }\n        }).catch(function(err) {\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalHostedFieldsProvider /> component. \".concat(err));\n            });\n        });\n    }, [\n        loadingStatus,\n        styles\n    ]); // eslint-disable-line react-hooks/exhaustive-deps\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: hostedFieldsContainerRef\n    }, isEligible ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalHostedFieldsContext.Provider, {\n        value: {\n            cardFields: cardFields,\n            registerHostedField: registerHostedField\n        }\n    }, children) : notEligibleError);\n};\n_s10(PayPalHostedFieldsProvider, \"eWpFenldniJQ6q3ig7MiwphvPS4=\", false, function() {\n    return [\n        useScriptProviderContext,\n        useScriptProviderContext,\n        useScriptProviderContext,\n        useHostedFieldsRegister,\n        useHostedFieldsRegister,\n        useHostedFieldsRegister\n    ];\n});\n_c5 = PayPalHostedFieldsProvider;\n/**\nThis `<PayPalHostedField />` component renders individual fields for [Hosted Fields](https://developer.paypal.com/docs/business/checkout/advanced-card-payments/integrate#3-add-javascript-sdk-and-card-form) integrations.\nIt relies on the `<PayPalHostedFieldsProvider />` parent component for managing state related to loading the JS SDK script\nand execute some validations before the rendering the fields.\n\nTo use the PayPal hosted fields you need to define at least three fields:\n\n- A card number field\n- The CVV code from the client card\n- The expiration date\n\nYou can define the expiration date as a single field similar to the example below,\nor you are able to define it in [two separate fields](https://paypal.github.io/react-paypal-js//?path=/docs/paypal-paypalhostedfields--expiration-date). One for the month and second for year.\n\nNote: Take care when using multiple instances of the PayPal Hosted Fields on the same page.\nThe component will fail to render when any of the selectors return more than one element.\n*/ var PayPalHostedField = function(_a) {\n    _s11();\n    var hostedFieldType = _a.hostedFieldType, // eslint-disable-line @typescript-eslint/no-unused-vars\n    options = _a.options, // eslint-disable-line @typescript-eslint/no-unused-vars\n    props = __rest$1(_a, [\n        \"hostedFieldType\",\n        \"options\"\n    ]);\n    var hostedFieldContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PayPalHostedFieldsContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a;\n        if (!(hostedFieldContext === null || hostedFieldContext === void 0 ? void 0 : hostedFieldContext.registerHostedField)) {\n            throw new Error(\"The HostedField cannot be register in the PayPalHostedFieldsProvider parent component\");\n        }\n        // Register in the parent provider\n        hostedFieldContext.registerHostedField((_a = {}, _a[hostedFieldType] = {\n            selector: options.selector,\n            placeholder: options.placeholder,\n            type: options.type,\n            formatInput: options.formatInput,\n            maskInput: options.maskInput,\n            select: options.select,\n            maxlength: options.maxlength,\n            minlength: options.minlength,\n            prefill: options.prefill,\n            rejectUnsupportedCards: options.rejectUnsupportedCards\n        }, _a));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", __assign({}, props));\n};\n_s11(PayPalHostedField, \"fOOV7P28SEQKnv1f85vT199r5Co=\");\n_c6 = PayPalHostedField;\n/**\n * Throw an exception if the CardFields is not found in the paypal namespace\n * Probably cause for this problem is not sending the card-fields string\n * as part of the components props in options\n * {@code <PayPalScriptProvider options={{ components: 'card-fields'}}>}\n *\n * @param param0 and object containing the components and namespace defined in options\n * @throws {@code Error}\n *\n */ var generateMissingCardFieldsError = function(_a) {\n    var _b = _a.components, components = _b === void 0 ? \"\" : _b, _c = SDK_SETTINGS.DATA_NAMESPACE, _d = _a[_c], dataNamespace = _d === void 0 ? DEFAULT_PAYPAL_NAMESPACE : _d;\n    var expectedComponents = components ? \"\".concat(components, \",card-fields\") : \"card-fields\";\n    var errorMessage = \"Unable to render <PayPalCardFieldsProvider /> because window.\".concat(dataNamespace, \".CardFields is undefined.\");\n    if (!components.includes(\"card-fields\")) {\n        errorMessage += \"\\nTo fix the issue, add 'card-fields' to the list of components passed to the parent PayPalScriptProvider: <PayPalScriptProvider options={{ components: '\".concat(expectedComponents, \"'}}>\");\n    }\n    return errorMessage;\n};\nfunction ignore() {\n    return;\n}\nfunction hasChildren(container) {\n    var _a;\n    return !!((_a = container.current) === null || _a === void 0 ? void 0 : _a.children.length);\n}\nvar PayPalCardFieldsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    cardFieldsForm: null,\n    fields: {},\n    registerField: ignore,\n    unregisterField: ignore // implementation is inside hook and passed through the provider\n});\nvar usePayPalCardFields = function() {\n    _s12();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PayPalCardFieldsContext);\n};\n_s12(usePayPalCardFields, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar usePayPalCardFieldsRegistry = function() {\n    _s13();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setError = _a[1];\n    var registeredFields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    var registerField = function() {\n        var props = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            props[_i] = arguments[_i];\n        }\n        var fieldName = props[0], options = props[1], cardFields = props[2];\n        if (registeredFields.current[fieldName]) {\n            setError(function() {\n                throw new Error(CARD_FIELDS_DUPLICATE_CHILDREN_ERROR);\n            });\n        }\n        registeredFields.current[fieldName] = cardFields === null || cardFields === void 0 ? void 0 : cardFields[fieldName](options);\n        return registeredFields.current[fieldName];\n    };\n    var unregisterField = function(fieldName) {\n        var field = registeredFields.current[fieldName];\n        if (field) {\n            field.close().catch(ignore);\n            delete registeredFields.current[fieldName];\n        }\n    };\n    return {\n        fields: registeredFields.current,\n        registerField: registerField,\n        unregisterField: unregisterField\n    };\n};\n_s13(usePayPalCardFieldsRegistry, \"HIcjjMVmvLNr8P6s8G/X3puqiBQ=\");\nvar FullWidthContainer = function(_a) {\n    var children = _a.children;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            width: \"100%\"\n        }\n    }, children);\n};\n_c7 = FullWidthContainer;\n/**\nThe `<PayPalCardFieldsProvider />` is a context provider that is designed to support the rendering and state management of PayPal CardFields in your application.\n\nThe context provider will initialize the `CardFields` instance from the JS SDK and determine eligibility to render the CardField components. Once the `CardFields` are initialized, the context provider will manage the state of the `CardFields` instance as well as the reference to each individual card field.\n\nPassing the `inputEvents` and `style` props to the context provider will apply them to each of the individual field components.\n\nThe state managed by the provider is accessible through our custom hook `usePayPalCardFields`.\n\n*/ var PayPalCardFieldsProvider = function(_a) {\n    _s14();\n    var children = _a.children, props = __rest$1(_a, [\n        \"children\"\n    ]);\n    var _b = usePayPalScriptReducer()[0], isResolved = _b.isResolved, options = _b.options;\n    var _c = usePayPalCardFieldsRegistry(), fields = _c.fields, registerField = _c.registerField, unregisterField = _c.unregisterField;\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), cardFieldsForm = _d[0], setCardFieldsForm = _d[1];\n    var cardFieldsInstance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), isEligible = _e[0], setIsEligible = _e[1];\n    // We set the error inside state so that it can be caught by React's error boundary\n    var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setError = _f[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a, _b, _c;\n        if (!isResolved) {\n            return;\n        }\n        try {\n            cardFieldsInstance.current = (_c = (_b = (_a = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE])).CardFields) === null || _b === void 0 ? void 0 : _b.call(_a, __assign({}, props))) !== null && _c !== void 0 ? _c : null;\n        } catch (error) {\n            setError(function() {\n                throw new Error(\"Failed to render <PayPalCardFieldsProvider /> component. Failed to initialize:  \".concat(error));\n            });\n            return;\n        }\n        if (!cardFieldsInstance.current) {\n            setError(function() {\n                var _a;\n                throw new Error(generateMissingCardFieldsError((_a = {\n                    components: options.components\n                }, _a[SDK_SETTINGS.DATA_NAMESPACE] = options[SDK_SETTINGS.DATA_NAMESPACE], _a)));\n            });\n            return;\n        }\n        setIsEligible(cardFieldsInstance.current.isEligible());\n        setCardFieldsForm(cardFieldsInstance.current);\n        return function() {\n            setCardFieldsForm(null);\n            cardFieldsInstance.current = null;\n        };\n    }, [\n        isResolved\n    ]); // eslint-disable-line react-hooks/exhaustive-deps\n    if (!isEligible) {\n        // TODO: What should be returned here?\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FullWidthContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardFieldsContext.Provider, {\n        value: {\n            cardFieldsForm: cardFieldsForm,\n            fields: fields,\n            registerField: registerField,\n            unregisterField: unregisterField\n        }\n    }, children));\n};\n_s14(PayPalCardFieldsProvider, \"jpP2849p+14uqUJaeihixebJvas=\", false, function() {\n    return [\n        usePayPalScriptReducer,\n        usePayPalScriptReducer,\n        usePayPalScriptReducer,\n        usePayPalCardFieldsRegistry,\n        usePayPalCardFieldsRegistry,\n        usePayPalCardFieldsRegistry,\n        usePayPalCardFieldsRegistry\n    ];\n});\n_c8 = PayPalCardFieldsProvider;\nvar PayPalCardField = function(_a) {\n    _s15();\n    var className = _a.className, fieldName = _a.fieldName, options = __rest$1(_a, [\n        \"className\",\n        \"fieldName\"\n    ]);\n    var _b = usePayPalCardFields(), cardFieldsForm = _b.cardFieldsForm, registerField = _b.registerField, unregisterField = _b.unregisterField;\n    var containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Set errors is state so that they can be caught by React's error boundary\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setError = _c[1];\n    function closeComponent() {\n        unregisterField(fieldName);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!cardFieldsForm) {\n            setError(function() {\n                throw new Error(CARD_FIELDS_CONTEXT_ERROR);\n            });\n            return closeComponent;\n        }\n        if (!containerRef.current) {\n            return closeComponent;\n        }\n        var registeredField = registerField(fieldName, options, cardFieldsForm);\n        registeredField === null || registeredField === void 0 ? void 0 : registeredField.render(containerRef.current).catch(function(err) {\n            if (!hasChildren(containerRef)) {\n                // Component no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // Component is still in the DOM\n            setError(function() {\n                throw new Error(\"Failed to render <PayPal\".concat(fieldName, \" /> component. \").concat(err));\n            });\n        });\n        return closeComponent;\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: containerRef,\n        className: className\n    });\n};\n_s15(PayPalCardField, \"sWqsrWkb/Ju+AIsiw/Rgep8b1bI=\", false, function() {\n    return [\n        usePayPalCardFields,\n        usePayPalCardFields,\n        usePayPalCardFields,\n        usePayPalCardFields\n    ];\n});\n_c9 = PayPalCardField;\nvar PayPalNameField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"NameField\"\n    }, options));\n};\n_c10 = PayPalNameField;\nvar PayPalNumberField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"NumberField\"\n    }, options));\n};\n_c11 = PayPalNumberField;\nvar PayPalExpiryField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"ExpiryField\"\n    }, options));\n};\n_c12 = PayPalExpiryField;\nvar PayPalCVVField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"CVVField\"\n    }, options));\n};\n_c13 = PayPalCVVField;\nvar FlexContainer = function(_a) {\n    var children = _a.children;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            width: \"100%\"\n        }\n    }, children);\n};\n_c14 = FlexContainer;\n/**\nThis `<PayPalCardFieldsForm />` component renders the 4 individual fields for [Card Fields](https://developer.paypal.com/docs/business/checkout/advanced-card-payments/integrate#3-add-javascript-sdk-and-card-form) integrations.\nThis setup relies on the `<PayPalCardFieldsProvider />` parent component, which manages the state related to loading the JS SDK script and performs certain validations before rendering the fields.\n\n\n\nNote: If you want to have more granular control over the layout of how the fields are rendered, you can alternatively use our Individual Fields.\n*/ var PayPalCardFieldsForm = function(_a) {\n    var className = _a.className;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: className\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"NameField\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"NumberField\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FlexContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FullWidthContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"ExpiryField\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FullWidthContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"CVVField\"\n    }))));\n};\n_c15 = PayPalCardFieldsForm;\nvar FUNDING$1 = {\n    PAYPAL: \"paypal\",\n    VENMO: \"venmo\",\n    APPLEPAY: \"applepay\",\n    ITAU: \"itau\",\n    CREDIT: \"credit\",\n    PAYLATER: \"paylater\",\n    CARD: \"card\",\n    IDEAL: \"ideal\",\n    SEPA: \"sepa\",\n    BANCONTACT: \"bancontact\",\n    GIROPAY: \"giropay\",\n    SOFORT: \"sofort\",\n    EPS: \"eps\",\n    MYBANK: \"mybank\",\n    P24: \"p24\",\n    PAYU: \"payu\",\n    BLIK: \"blik\",\n    TRUSTLY: \"trustly\",\n    OXXO: \"oxxo\",\n    BOLETO: \"boleto\",\n    BOLETOBANCARIO: \"boletobancario\",\n    WECHATPAY: \"wechatpay\",\n    MERCADOPAGO: \"mercadopago\",\n    MULTIBANCO: \"multibanco\",\n    SATISPAY: \"satispay\",\n    PAIDY: \"paidy\",\n    ZIMPLER: \"zimpler\",\n    MAXIMA: \"maxima\"\n};\n[\n    FUNDING$1.IDEAL,\n    FUNDING$1.BANCONTACT,\n    FUNDING$1.GIROPAY,\n    FUNDING$1.SOFORT,\n    FUNDING$1.EPS,\n    FUNDING$1.MYBANK,\n    FUNDING$1.P24,\n    FUNDING$1.PAYU,\n    FUNDING$1.BLIK,\n    FUNDING$1.TRUSTLY,\n    FUNDING$1.OXXO,\n    FUNDING$1.BOLETO,\n    FUNDING$1.BOLETOBANCARIO,\n    FUNDING$1.WECHATPAY,\n    FUNDING$1.MERCADOPAGO,\n    FUNDING$1.MULTIBANCO,\n    FUNDING$1.SATISPAY,\n    FUNDING$1.PAIDY,\n    FUNDING$1.MAXIMA,\n    FUNDING$1.ZIMPLER\n];\n// We do not re-export `FUNDING` from the `sdk-constants` module\n// directly because it has no type definitions.\n//\n// See https://github.com/paypal/react-paypal-js/issues/125\nvar FUNDING = FUNDING$1;\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;\n$RefreshReg$(_c, \"PayPalButtons\");\n$RefreshReg$(_c1, \"BraintreePayPalButtons\");\n$RefreshReg$(_c2, \"PayPalMarks\");\n$RefreshReg$(_c3, \"PayPalMessages\");\n$RefreshReg$(_c4, \"PayPalScriptProvider\");\n$RefreshReg$(_c5, \"PayPalHostedFieldsProvider\");\n$RefreshReg$(_c6, \"PayPalHostedField\");\n$RefreshReg$(_c7, \"FullWidthContainer\");\n$RefreshReg$(_c8, \"PayPalCardFieldsProvider\");\n$RefreshReg$(_c9, \"PayPalCardField\");\n$RefreshReg$(_c10, \"PayPalNameField\");\n$RefreshReg$(_c11, \"PayPalNumberField\");\n$RefreshReg$(_c12, \"PayPalExpiryField\");\n$RefreshReg$(_c13, \"PayPalCVVField\");\n$RefreshReg$(_c14, \"FlexContainer\");\n$RefreshReg$(_c15, \"PayPalCardFieldsForm\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"75c45d196977\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/ZWY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjc1YzQ1ZDE5Njk3N1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/PayPalProviderWrapper.tsx":
/*!**************************************************!*\
  !*** ./src/components/PayPalProviderWrapper.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PayPalProviderWrapper; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _paypal_react_paypal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @paypal/react-paypal-js */ \"(app-pages-browser)/./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\nfunction PayPalProviderWrapper(param) {\n    let { children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_paypal_react_paypal_js__WEBPACK_IMPORTED_MODULE_1__.PayPalScriptProvider, {\n        options: {\n            clientId: \"AbtSt71jXUTzBs4JxiUzs80U7OqNURaGjzJ7BURqJPoJ3F-GZpwLDkb7Ww2JVu52YdpDwVpTxiattig4\",\n            currency: \"USD\"\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/hellosauri/Downloads/project 2/src/components/PayPalProviderWrapper.tsx\",\n        lineNumber: 11,\n        columnNumber: 5\n    }, this);\n}\n_c = PayPalProviderWrapper;\nvar _c;\n$RefreshReg$(_c, \"PayPalProviderWrapper\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL1BheVBhbFByb3ZpZGVyV3JhcHBlci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUUrRDtBQUVoRCxTQUFTQyxzQkFBc0IsS0FJN0M7UUFKNkMsRUFDNUNDLFFBQVEsRUFHVCxHQUo2QztJQUs1QyxxQkFDRSw4REFBQ0YseUVBQW9CQTtRQUNuQkcsU0FBUztZQUNQQyxVQUNFO1lBQ0ZDLFVBQVU7UUFDWjtrQkFFQ0g7Ozs7OztBQUdQO0tBaEJ3QkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvUGF5UGFsUHJvdmlkZXJXcmFwcGVyLnRzeD9jNzdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyBQYXlQYWxTY3JpcHRQcm92aWRlciB9IGZyb20gXCJAcGF5cGFsL3JlYWN0LXBheXBhbC1qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXlQYWxQcm92aWRlcldyYXBwZXIoe1xuICBjaGlsZHJlbixcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8UGF5UGFsU2NyaXB0UHJvdmlkZXJcbiAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgY2xpZW50SWQ6XG4gICAgICAgICAgXCJBYnRTdDcxalhVVHpCczRKeGlVenM4MFU3T3FOVVJhR2p6SjdCVVJxSlBvSjNGLUdacHdMRGtiN1d3MkpWdTUyWWRwRHdWcFR4aWF0dGlnNFwiLFxuICAgICAgICBjdXJyZW5jeTogXCJVU0RcIixcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvUGF5UGFsU2NyaXB0UHJvdmlkZXI+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiUGF5UGFsU2NyaXB0UHJvdmlkZXIiLCJQYXlQYWxQcm92aWRlcldyYXBwZXIiLCJjaGlsZHJlbiIsIm9wdGlvbnMiLCJjbGllbnRJZCIsImN1cnJlbmN5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PayPalProviderWrapper.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/CartContext.tsx":
/*!*************************************!*\
  !*** ./src/context/CartContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CartProvider: function() { return /* binding */ CartProvider; },\n/* harmony export */   useCart: function() { return /* binding */ useCart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_cartUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/cartUtils */ \"(app-pages-browser)/./src/utils/cartUtils.ts\");\n/* __next_internal_client_entry_do_not_use__ CartProvider,useCart auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst CartContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst CartProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [items, setItems] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [subtotal, setSubtotal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [tax, setTax] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [total, setTotal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const newSubtotal = (0,_utils_cartUtils__WEBPACK_IMPORTED_MODULE_2__.calculateSubtotal)(items);\n        const newTax = (0,_utils_cartUtils__WEBPACK_IMPORTED_MODULE_2__.calculateTax)(newSubtotal);\n        const newTotal = (0,_utils_cartUtils__WEBPACK_IMPORTED_MODULE_2__.calculateTotal)(newSubtotal, newTax);\n        setSubtotal(newSubtotal);\n        setTax(newTax);\n        setTotal(newTotal);\n    }, [\n        items\n    ]);\n    const addItem = (item)=>{\n        setItems((prevItems)=>{\n            const existingItem = prevItems.find((i)=>i.id === item.id);\n            if (existingItem) {\n                return prevItems.map((i)=>i.id === item.id ? {\n                        ...i,\n                        quantity: i.quantity + 1\n                    } : i);\n            }\n            return [\n                ...prevItems,\n                {\n                    ...item,\n                    quantity: 1\n                }\n            ];\n        });\n    };\n    const removeItem = (itemId)=>{\n        setItems((prevItems)=>prevItems.filter((item)=>item.id !== itemId));\n    };\n    const updateQuantity = (itemId, quantity)=>{\n        if (quantity <= 0) {\n            removeItem(itemId);\n            return;\n        }\n        setItems((prevItems)=>prevItems.map((item)=>item.id === itemId ? {\n                    ...item,\n                    quantity\n                } : item));\n    };\n    const clearCart = ()=>{\n        setItems([]);\n    };\n    const value = {\n        items,\n        addItem,\n        removeItem,\n        updateQuantity,\n        clearCart,\n        subtotal,\n        tax,\n        total\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CartContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/hellosauri/Downloads/project 2/src/context/CartContext.tsx\",\n        lineNumber: 88,\n        columnNumber: 10\n    }, undefined);\n};\n_s(CartProvider, \"Sw8jyfuJozyjc9fM8PI2F5lWJqA=\");\n_c = CartProvider;\nconst useCart = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CartContext);\n    if (context === undefined) {\n        throw new Error(\"useCart must be used within a CartProvider\");\n    }\n    return context;\n};\n_s1(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0L0NhcnRDb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUU4RTtBQU1uRDtBQWEzQixNQUFNUSw0QkFBY1Asb0RBQWFBLENBQThCUTtBQUV4RCxNQUFNQyxlQUF3RDtRQUFDLEVBQ3BFQyxRQUFRLEVBQ1Q7O0lBQ0MsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdWLCtDQUFRQSxDQUFhLEVBQUU7SUFDakQsTUFBTSxDQUFDVyxVQUFVQyxZQUFZLEdBQUdaLCtDQUFRQSxDQUFDO0lBQ3pDLE1BQU0sQ0FBQ2EsS0FBS0MsT0FBTyxHQUFHZCwrQ0FBUUEsQ0FBQztJQUMvQixNQUFNLENBQUNlLE9BQU9DLFNBQVMsR0FBR2hCLCtDQUFRQSxDQUFDO0lBRW5DQyxnREFBU0EsQ0FBQztRQUNSLE1BQU1nQixjQUFjZixtRUFBaUJBLENBQUNPO1FBQ3RDLE1BQU1TLFNBQVNmLDhEQUFZQSxDQUFDYztRQUM1QixNQUFNRSxXQUFXZixnRUFBY0EsQ0FBQ2EsYUFBYUM7UUFFN0NOLFlBQVlLO1FBQ1pILE9BQU9JO1FBQ1BGLFNBQVNHO0lBQ1gsR0FBRztRQUFDVjtLQUFNO0lBRVYsTUFBTVcsVUFBVSxDQUFDQztRQUNmWCxTQUFTLENBQUNZO1lBQ1IsTUFBTUMsZUFBZUQsVUFBVUUsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLEVBQUUsS0FBS0wsS0FBS0ssRUFBRTtZQUUzRCxJQUFJSCxjQUFjO2dCQUNoQixPQUFPRCxVQUFVSyxHQUFHLENBQUMsQ0FBQ0YsSUFDcEJBLEVBQUVDLEVBQUUsS0FBS0wsS0FBS0ssRUFBRSxHQUFHO3dCQUFFLEdBQUdELENBQUM7d0JBQUVHLFVBQVVILEVBQUVHLFFBQVEsR0FBRztvQkFBRSxJQUFJSDtZQUU1RDtZQUVBLE9BQU87bUJBQUlIO2dCQUFXO29CQUFFLEdBQUdELElBQUk7b0JBQUVPLFVBQVU7Z0JBQUU7YUFBRTtRQUNqRDtJQUNGO0lBRUEsTUFBTUMsYUFBYSxDQUFDQztRQUNsQnBCLFNBQVMsQ0FBQ1ksWUFBY0EsVUFBVVMsTUFBTSxDQUFDLENBQUNWLE9BQVNBLEtBQUtLLEVBQUUsS0FBS0k7SUFDakU7SUFFQSxNQUFNRSxpQkFBaUIsQ0FBQ0YsUUFBZ0JGO1FBQ3RDLElBQUlBLFlBQVksR0FBRztZQUNqQkMsV0FBV0M7WUFDWDtRQUNGO1FBRUFwQixTQUFTLENBQUNZLFlBQ1JBLFVBQVVLLEdBQUcsQ0FBQyxDQUFDTixPQUNiQSxLQUFLSyxFQUFFLEtBQUtJLFNBQVM7b0JBQUUsR0FBR1QsSUFBSTtvQkFBRU87Z0JBQVMsSUFBSVA7SUFHbkQ7SUFFQSxNQUFNWSxZQUFZO1FBQ2hCdkIsU0FBUyxFQUFFO0lBQ2I7SUFFQSxNQUFNd0IsUUFBUTtRQUNaekI7UUFDQVc7UUFDQVM7UUFDQUc7UUFDQUM7UUFDQXRCO1FBQ0FFO1FBQ0FFO0lBQ0Y7SUFFQSxxQkFBTyw4REFBQ1YsWUFBWThCLFFBQVE7UUFBQ0QsT0FBT0E7a0JBQVExQjs7Ozs7O0FBQzlDLEVBQUU7R0FqRVdEO0tBQUFBO0FBbUVOLE1BQU02QixVQUFVOztJQUNyQixNQUFNQyxVQUFVdEMsaURBQVVBLENBQUNNO0lBQzNCLElBQUlnQyxZQUFZL0IsV0FBVztRQUN6QixNQUFNLElBQUlnQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVCxFQUFFO0lBTldEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb250ZXh0L0NhcnRDb250ZXh0LnRzeD9iZWQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ2FydEl0ZW0sIE1lbnVJdGVtIH0gZnJvbSBcIkAvdHlwZXNcIjtcbmltcG9ydCB7XG4gIGNhbGN1bGF0ZVN1YnRvdGFsLFxuICBjYWxjdWxhdGVUYXgsXG4gIGNhbGN1bGF0ZVRvdGFsLFxufSBmcm9tIFwiQC91dGlscy9jYXJ0VXRpbHNcIjtcblxuaW50ZXJmYWNlIENhcnRDb250ZXh0VHlwZSB7XG4gIGl0ZW1zOiBDYXJ0SXRlbVtdO1xuICBhZGRJdGVtOiAoaXRlbTogTWVudUl0ZW0pID0+IHZvaWQ7XG4gIHJlbW92ZUl0ZW06IChpdGVtSWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgdXBkYXRlUXVhbnRpdHk6IChpdGVtSWQ6IHN0cmluZywgcXVhbnRpdHk6IG51bWJlcikgPT4gdm9pZDtcbiAgY2xlYXJDYXJ0OiAoKSA9PiB2b2lkO1xuICBzdWJ0b3RhbDogbnVtYmVyO1xuICB0YXg6IG51bWJlcjtcbiAgdG90YWw6IG51bWJlcjtcbn1cblxuY29uc3QgQ2FydENvbnRleHQgPSBjcmVhdGVDb250ZXh0PENhcnRDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuZXhwb3J0IGNvbnN0IENhcnRQcm92aWRlcjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHtcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IFtpdGVtcywgc2V0SXRlbXNdID0gdXNlU3RhdGU8Q2FydEl0ZW1bXT4oW10pO1xuICBjb25zdCBbc3VidG90YWwsIHNldFN1YnRvdGFsXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbdGF4LCBzZXRUYXhdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFt0b3RhbCwgc2V0VG90YWxdID0gdXNlU3RhdGUoMCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBuZXdTdWJ0b3RhbCA9IGNhbGN1bGF0ZVN1YnRvdGFsKGl0ZW1zKTtcbiAgICBjb25zdCBuZXdUYXggPSBjYWxjdWxhdGVUYXgobmV3U3VidG90YWwpO1xuICAgIGNvbnN0IG5ld1RvdGFsID0gY2FsY3VsYXRlVG90YWwobmV3U3VidG90YWwsIG5ld1RheCk7XG5cbiAgICBzZXRTdWJ0b3RhbChuZXdTdWJ0b3RhbCk7XG4gICAgc2V0VGF4KG5ld1RheCk7XG4gICAgc2V0VG90YWwobmV3VG90YWwpO1xuICB9LCBbaXRlbXNdKTtcblxuICBjb25zdCBhZGRJdGVtID0gKGl0ZW06IE1lbnVJdGVtKSA9PiB7XG4gICAgc2V0SXRlbXMoKHByZXZJdGVtcykgPT4ge1xuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gcHJldkl0ZW1zLmZpbmQoKGkpID0+IGkuaWQgPT09IGl0ZW0uaWQpO1xuXG4gICAgICBpZiAoZXhpc3RpbmdJdGVtKSB7XG4gICAgICAgIHJldHVybiBwcmV2SXRlbXMubWFwKChpKSA9PlxuICAgICAgICAgIGkuaWQgPT09IGl0ZW0uaWQgPyB7IC4uLmksIHF1YW50aXR5OiBpLnF1YW50aXR5ICsgMSB9IDogaVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gWy4uLnByZXZJdGVtcywgeyAuLi5pdGVtLCBxdWFudGl0eTogMSB9XTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCByZW1vdmVJdGVtID0gKGl0ZW1JZDogc3RyaW5nKSA9PiB7XG4gICAgc2V0SXRlbXMoKHByZXZJdGVtcykgPT4gcHJldkl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCAhPT0gaXRlbUlkKSk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlUXVhbnRpdHkgPSAoaXRlbUlkOiBzdHJpbmcsIHF1YW50aXR5OiBudW1iZXIpID0+IHtcbiAgICBpZiAocXVhbnRpdHkgPD0gMCkge1xuICAgICAgcmVtb3ZlSXRlbShpdGVtSWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldEl0ZW1zKChwcmV2SXRlbXMpID0+XG4gICAgICBwcmV2SXRlbXMubWFwKChpdGVtKSA9PlxuICAgICAgICBpdGVtLmlkID09PSBpdGVtSWQgPyB7IC4uLml0ZW0sIHF1YW50aXR5IH0gOiBpdGVtXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBjbGVhckNhcnQgPSAoKSA9PiB7XG4gICAgc2V0SXRlbXMoW10pO1xuICB9O1xuXG4gIGNvbnN0IHZhbHVlID0ge1xuICAgIGl0ZW1zLFxuICAgIGFkZEl0ZW0sXG4gICAgcmVtb3ZlSXRlbSxcbiAgICB1cGRhdGVRdWFudGl0eSxcbiAgICBjbGVhckNhcnQsXG4gICAgc3VidG90YWwsXG4gICAgdGF4LFxuICAgIHRvdGFsLFxuICB9O1xuXG4gIHJldHVybiA8Q2FydENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT57Y2hpbGRyZW59PC9DYXJ0Q29udGV4dC5Qcm92aWRlcj47XG59O1xuXG5leHBvcnQgY29uc3QgdXNlQ2FydCA9ICgpOiBDYXJ0Q29udGV4dFR5cGUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChDYXJ0Q29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VDYXJ0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBDYXJ0UHJvdmlkZXJcIik7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImNhbGN1bGF0ZVN1YnRvdGFsIiwiY2FsY3VsYXRlVGF4IiwiY2FsY3VsYXRlVG90YWwiLCJDYXJ0Q29udGV4dCIsInVuZGVmaW5lZCIsIkNhcnRQcm92aWRlciIsImNoaWxkcmVuIiwiaXRlbXMiLCJzZXRJdGVtcyIsInN1YnRvdGFsIiwic2V0U3VidG90YWwiLCJ0YXgiLCJzZXRUYXgiLCJ0b3RhbCIsInNldFRvdGFsIiwibmV3U3VidG90YWwiLCJuZXdUYXgiLCJuZXdUb3RhbCIsImFkZEl0ZW0iLCJpdGVtIiwicHJldkl0ZW1zIiwiZXhpc3RpbmdJdGVtIiwiZmluZCIsImkiLCJpZCIsIm1hcCIsInF1YW50aXR5IiwicmVtb3ZlSXRlbSIsIml0ZW1JZCIsImZpbHRlciIsInVwZGF0ZVF1YW50aXR5IiwiY2xlYXJDYXJ0IiwidmFsdWUiLCJQcm92aWRlciIsInVzZUNhcnQiLCJjb250ZXh0IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/CartContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/utils/cartUtils.ts":
/*!********************************!*\
  !*** ./src/utils/cartUtils.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateSubtotal: function() { return /* binding */ calculateSubtotal; },\n/* harmony export */   calculateTax: function() { return /* binding */ calculateTax; },\n/* harmony export */   calculateTotal: function() { return /* binding */ calculateTotal; },\n/* harmony export */   formatCurrency: function() { return /* binding */ formatCurrency; }\n/* harmony export */ });\nconst calculateSubtotal = (items)=>{\n    return items.reduce((total, item)=>total + item.price * item.quantity, 0);\n};\nconst calculateTax = (subtotal)=>{\n    return subtotal * 0.08; // 8% tax rate\n};\nconst calculateTotal = (subtotal, tax)=>{\n    return subtotal + tax;\n};\nconst formatCurrency = (amount)=>{\n    return new Intl.NumberFormat(\"en-GB\", {\n        style: \"currency\",\n        currency: \"GBP\"\n    }).format(amount);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlscy9jYXJ0VXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVPLE1BQU1BLG9CQUFvQixDQUFDQztJQUNoQyxPQUFPQSxNQUFNQyxNQUFNLENBQUMsQ0FBQ0MsT0FBT0MsT0FBU0QsUUFBUUMsS0FBS0MsS0FBSyxHQUFHRCxLQUFLRSxRQUFRLEVBQUU7QUFDM0UsRUFBRTtBQUVLLE1BQU1DLGVBQWUsQ0FBQ0M7SUFDM0IsT0FBT0EsV0FBVyxNQUFNLGNBQWM7QUFDeEMsRUFBRTtBQUVLLE1BQU1DLGlCQUFpQixDQUFDRCxVQUFrQkU7SUFDL0MsT0FBT0YsV0FBV0U7QUFDcEIsRUFBRTtBQUVLLE1BQU1DLGlCQUFpQixDQUFDQztJQUM3QixPQUFPLElBQUlDLEtBQUtDLFlBQVksQ0FBQyxTQUFTO1FBQ3BDQyxPQUFPO1FBQ1BDLFVBQVU7SUFDWixHQUFHQyxNQUFNLENBQUNMO0FBQ1osRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvdXRpbHMvY2FydFV0aWxzLnRzPzUxZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FydEl0ZW0gfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVN1YnRvdGFsID0gKGl0ZW1zOiBDYXJ0SXRlbVtdKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgodG90YWwsIGl0ZW0pID0+IHRvdGFsICsgaXRlbS5wcmljZSAqIGl0ZW0ucXVhbnRpdHksIDApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRheCA9IChzdWJ0b3RhbDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHN1YnRvdGFsICogMC4wODsgLy8gOCUgdGF4IHJhdGVcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVUb3RhbCA9IChzdWJ0b3RhbDogbnVtYmVyLCB0YXg6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBzdWJ0b3RhbCArIHRheDtcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRDdXJyZW5jeSA9IChhbW91bnQ6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIHJldHVybiBuZXcgSW50bC5OdW1iZXJGb3JtYXQoXCJlbi1HQlwiLCB7XG4gICAgc3R5bGU6IFwiY3VycmVuY3lcIixcbiAgICBjdXJyZW5jeTogXCJHQlBcIixcbiAgfSkuZm9ybWF0KGFtb3VudCk7XG59O1xuIl0sIm5hbWVzIjpbImNhbGN1bGF0ZVN1YnRvdGFsIiwiaXRlbXMiLCJyZWR1Y2UiLCJ0b3RhbCIsIml0ZW0iLCJwcmljZSIsInF1YW50aXR5IiwiY2FsY3VsYXRlVGF4Iiwic3VidG90YWwiLCJjYWxjdWxhdGVUb3RhbCIsInRheCIsImZvcm1hdEN1cnJlbmN5IiwiYW1vdW50IiwiSW50bCIsIk51bWJlckZvcm1hdCIsInN0eWxlIiwiY3VycmVuY3kiLCJmb3JtYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/cartUtils.ts\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcomponents%2FPayPalProviderWrapper.tsx&modules=%2FUsers%2Fhellosauri%2FDownloads%2Fproject%202%2Fsrc%2Fcontext%2FCartContext.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);