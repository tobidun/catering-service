"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@paypal";
exports.ids = ["vendor-chunks/@paypal"];
exports.modules = {

/***/ "(ssr)/./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BraintreePayPalButtons: () => (/* binding */ BraintreePayPalButtons),\n/* harmony export */   DISPATCH_ACTION: () => (/* binding */ DISPATCH_ACTION),\n/* harmony export */   FUNDING: () => (/* binding */ FUNDING),\n/* harmony export */   PAYPAL_HOSTED_FIELDS_TYPES: () => (/* binding */ PAYPAL_HOSTED_FIELDS_TYPES),\n/* harmony export */   PayPalButtons: () => (/* binding */ PayPalButtons),\n/* harmony export */   PayPalCVVField: () => (/* binding */ PayPalCVVField),\n/* harmony export */   PayPalCardFieldsContext: () => (/* binding */ PayPalCardFieldsContext),\n/* harmony export */   PayPalCardFieldsForm: () => (/* binding */ PayPalCardFieldsForm),\n/* harmony export */   PayPalCardFieldsProvider: () => (/* binding */ PayPalCardFieldsProvider),\n/* harmony export */   PayPalExpiryField: () => (/* binding */ PayPalExpiryField),\n/* harmony export */   PayPalHostedField: () => (/* binding */ PayPalHostedField),\n/* harmony export */   PayPalHostedFieldsProvider: () => (/* binding */ PayPalHostedFieldsProvider),\n/* harmony export */   PayPalMarks: () => (/* binding */ PayPalMarks),\n/* harmony export */   PayPalMessages: () => (/* binding */ PayPalMessages),\n/* harmony export */   PayPalNameField: () => (/* binding */ PayPalNameField),\n/* harmony export */   PayPalNumberField: () => (/* binding */ PayPalNumberField),\n/* harmony export */   PayPalScriptProvider: () => (/* binding */ PayPalScriptProvider),\n/* harmony export */   SCRIPT_LOADING_STATE: () => (/* binding */ SCRIPT_LOADING_STATE),\n/* harmony export */   ScriptContext: () => (/* binding */ ScriptContext),\n/* harmony export */   destroySDKScript: () => (/* binding */ destroySDKScript),\n/* harmony export */   getScriptID: () => (/* binding */ getScriptID),\n/* harmony export */   scriptReducer: () => (/* binding */ scriptReducer),\n/* harmony export */   usePayPalCardFields: () => (/* binding */ usePayPalCardFields),\n/* harmony export */   usePayPalHostedFields: () => (/* binding */ usePayPalHostedFields),\n/* harmony export */   usePayPalScriptReducer: () => (/* binding */ usePayPalScriptReducer),\n/* harmony export */   useScriptProviderContext: () => (/* binding */ useScriptProviderContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/*!\n * react-paypal-js v8.8.3 (2025-04-11T19:50:46.506Z)\n * Copyright 2020-present, PayPal, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \n/**\n * Enum for the SDK script resolve status,\n *\n * @enum {string}\n */ var SCRIPT_LOADING_STATE;\n(function(SCRIPT_LOADING_STATE) {\n    SCRIPT_LOADING_STATE[\"INITIAL\"] = \"initial\";\n    SCRIPT_LOADING_STATE[\"PENDING\"] = \"pending\";\n    SCRIPT_LOADING_STATE[\"REJECTED\"] = \"rejected\";\n    SCRIPT_LOADING_STATE[\"RESOLVED\"] = \"resolved\";\n})(SCRIPT_LOADING_STATE || (SCRIPT_LOADING_STATE = {}));\n/**\n * Enum for the PayPalScriptProvider context dispatch actions\n *\n * @enum {string}\n */ var DISPATCH_ACTION;\n(function(DISPATCH_ACTION) {\n    DISPATCH_ACTION[\"LOADING_STATUS\"] = \"setLoadingStatus\";\n    DISPATCH_ACTION[\"RESET_OPTIONS\"] = \"resetOptions\";\n    DISPATCH_ACTION[\"SET_BRAINTREE_INSTANCE\"] = \"braintreeInstance\";\n})(DISPATCH_ACTION || (DISPATCH_ACTION = {}));\n/**\n * Enum for all the available hosted fields\n *\n * @enum {string}\n */ var PAYPAL_HOSTED_FIELDS_TYPES;\n(function(PAYPAL_HOSTED_FIELDS_TYPES) {\n    PAYPAL_HOSTED_FIELDS_TYPES[\"NUMBER\"] = \"number\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"CVV\"] = \"cvv\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"EXPIRATION_DATE\"] = \"expirationDate\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"EXPIRATION_MONTH\"] = \"expirationMonth\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"EXPIRATION_YEAR\"] = \"expirationYear\";\n    PAYPAL_HOSTED_FIELDS_TYPES[\"POSTAL_CODE\"] = \"postalCode\";\n})(PAYPAL_HOSTED_FIELDS_TYPES || (PAYPAL_HOSTED_FIELDS_TYPES = {}));\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest$1(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n/*********************************************\n * Common reference to the script identifier *\n *********************************************/ // keep this script id value in kebab-case format\nvar SCRIPT_ID = \"data-react-paypal-script-id\";\nvar SDK_SETTINGS = {\n    DATA_CLIENT_TOKEN: \"dataClientToken\",\n    DATA_JS_SDK_LIBRARY: \"dataJsSdkLibrary\",\n    DATA_LIBRARY_VALUE: \"react-paypal-js\",\n    DATA_NAMESPACE: \"dataNamespace\",\n    DATA_SDK_INTEGRATION_SOURCE: \"dataSdkIntegrationSource\",\n    DATA_USER_ID_TOKEN: \"dataUserIdToken\"\n};\nvar LOAD_SCRIPT_ERROR = \"Failed to load the PayPal JS SDK script.\";\n/****************************\n * Braintree error messages *\n ****************************/ var EMPTY_BRAINTREE_AUTHORIZATION_ERROR_MESSAGE = \"Invalid authorization data. Use dataClientToken or dataUserIdToken to authorize.\";\nvar braintreeVersion = \"3.117.0\";\nvar BRAINTREE_SOURCE = \"https://js.braintreegateway.com/web/\".concat(braintreeVersion, \"/js/client.min.js\");\nvar BRAINTREE_PAYPAL_CHECKOUT_SOURCE = \"https://js.braintreegateway.com/web/\".concat(braintreeVersion, \"/js/paypal-checkout.min.js\");\n/*********************\n * PayPal namespaces *\n *********************/ var DEFAULT_PAYPAL_NAMESPACE = \"paypal\";\nvar DEFAULT_BRAINTREE_NAMESPACE = \"braintree\";\n/*****************\n * Hosted Fields *\n *****************/ var HOSTED_FIELDS_CHILDREN_ERROR = \"To use HostedFields you must use it with at least 3 children with types: [number, cvv, expirationDate] includes\";\nvar HOSTED_FIELDS_DUPLICATE_CHILDREN_ERROR = \"Cannot use duplicate HostedFields as children\";\n/*******************\n * Script Provider *\n *******************/ var SCRIPT_PROVIDER_REDUCER_ERROR = \"usePayPalScriptReducer must be used within a PayPalScriptProvider\";\nvar CARD_FIELDS_DUPLICATE_CHILDREN_ERROR = \"Cannot use duplicate CardFields as children\";\nvar CARD_FIELDS_CONTEXT_ERROR = \"Individual CardFields must be rendered inside the PayPalCardFieldsProvider\";\n/**\n * Get the namespace from the window in the browser\n * this is useful to get the paypal object from window\n * after load PayPal SDK script\n *\n * @param namespace the name space to return\n * @returns the namespace if exists or undefined otherwise\n */ function getPayPalWindowNamespace$1(namespace) {\n    if (namespace === void 0) {\n        namespace = DEFAULT_PAYPAL_NAMESPACE;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window[namespace];\n}\n/**\n * Get a namespace from the window in the browser\n * this is useful to get the braintree from window\n * after load Braintree script\n *\n * @param namespace the name space to return\n * @returns the namespace if exists or undefined otherwise\n */ function getBraintreeWindowNamespace(namespace) {\n    if (namespace === void 0) {\n        namespace = DEFAULT_BRAINTREE_NAMESPACE;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window[namespace];\n}\n/**\n * Creates a string hash code based on the string argument\n *\n * @param str the source input string to hash\n * @returns string hash code\n */ function hashStr(str) {\n    var hash = \"\";\n    for(var i = 0; i < str.length; i++){\n        var total = str[i].charCodeAt(0) * i;\n        if (str[i + 1]) {\n            total += str[i + 1].charCodeAt(0) * (i - 1);\n        }\n        hash += String.fromCharCode(97 + Math.abs(total) % 26);\n    }\n    return hash;\n}\nfunction generateErrorMessage(_a) {\n    var reactComponentName = _a.reactComponentName, sdkComponentKey = _a.sdkComponentKey, _b = _a.sdkRequestedComponents, sdkRequestedComponents = _b === void 0 ? \"\" : _b, _c = _a.sdkDataNamespace, sdkDataNamespace = _c === void 0 ? DEFAULT_PAYPAL_NAMESPACE : _c;\n    var requiredOptionCapitalized = sdkComponentKey.charAt(0).toUpperCase().concat(sdkComponentKey.substring(1));\n    var errorMessage = \"Unable to render <\".concat(reactComponentName, \" /> because window.\").concat(sdkDataNamespace, \".\").concat(requiredOptionCapitalized, \" is undefined.\");\n    // The JS SDK only loads the buttons component by default.\n    // All other components like messages and marks must be requested using the \"components\" query parameter\n    var requestedComponents = typeof sdkRequestedComponents === \"string\" ? sdkRequestedComponents : sdkRequestedComponents.join(\",\");\n    if (!requestedComponents.includes(sdkComponentKey)) {\n        var expectedComponents = [\n            requestedComponents,\n            sdkComponentKey\n        ].filter(Boolean).join();\n        errorMessage += \"\\nTo fix the issue, add '\".concat(sdkComponentKey, \"' to the list of components passed to the parent PayPalScriptProvider:\") + \"\\n`<PayPalScriptProvider options={{ components: '\".concat(expectedComponents, \"'}}>`.\");\n    }\n    return errorMessage;\n}\n/**\n * Generate a new random identifier for react-paypal-js\n *\n * @returns the {@code string} containing the random library name\n */ function getScriptID(options) {\n    // exclude the data-react-paypal-script-id value from the options hash\n    var _a = options, _b = SCRIPT_ID;\n    _a[_b];\n    var paypalScriptOptions = __rest$1(_a, [\n        _b + \"\"\n    ]);\n    return \"react-paypal-js-\".concat(hashStr(JSON.stringify(paypalScriptOptions)));\n}\n/**\n * Destroy the PayPal SDK from the document page\n *\n * @param reactPayPalScriptID the script identifier\n */ function destroySDKScript(reactPayPalScriptID) {\n    var scriptNode = self.document.querySelector(\"script[\".concat(SCRIPT_ID, '=\"').concat(reactPayPalScriptID, '\"]'));\n    if (scriptNode === null || scriptNode === void 0 ? void 0 : scriptNode.parentNode) {\n        scriptNode.parentNode.removeChild(scriptNode);\n    }\n}\n/**\n * Reducer function to handle complex state changes on the context\n *\n * @param state  the current state on the context object\n * @param action the action to be executed on the previous state\n * @returns a the same state if the action wasn't found, or a new state otherwise\n */ function scriptReducer(state, action) {\n    var _a, _b;\n    switch(action.type){\n        case DISPATCH_ACTION.LOADING_STATUS:\n            if (typeof action.value === \"object\") {\n                return __assign(__assign({}, state), {\n                    loadingStatus: action.value.state,\n                    loadingStatusErrorMessage: action.value.message\n                });\n            }\n            return __assign(__assign({}, state), {\n                loadingStatus: action.value\n            });\n        case DISPATCH_ACTION.RESET_OPTIONS:\n            // destroy existing script to make sure only one script loads at a time\n            destroySDKScript(state.options[SCRIPT_ID]);\n            return __assign(__assign({}, state), {\n                loadingStatus: SCRIPT_LOADING_STATE.PENDING,\n                options: __assign(__assign((_a = {}, _a[SDK_SETTINGS.DATA_SDK_INTEGRATION_SOURCE] = SDK_SETTINGS.DATA_LIBRARY_VALUE, _a), action.value), (_b = {}, _b[SCRIPT_ID] = \"\".concat(getScriptID(action.value)), _b))\n            });\n        case DISPATCH_ACTION.SET_BRAINTREE_INSTANCE:\n            return __assign(__assign({}, state), {\n                braintreePayPalCheckoutInstance: action.value\n            });\n        default:\n            {\n                return state;\n            }\n    }\n}\n// Create the React context to use in the script provider component\nvar ScriptContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n/**\n * Check if the context is valid and ready to dispatch actions.\n *\n * @param scriptContext the result of connecting to the context provider\n * @returns strict context avoiding null values in the type\n */ function validateReducer(scriptContext) {\n    if (typeof (scriptContext === null || scriptContext === void 0 ? void 0 : scriptContext.dispatch) === \"function\" && scriptContext.dispatch.length !== 0) {\n        return scriptContext;\n    }\n    throw new Error(SCRIPT_PROVIDER_REDUCER_ERROR);\n}\n/**\n * Check if the dataClientToken or the dataUserIdToken are\n * set in the options of the context.\n * @type dataClientToken is use to pass a client token\n * @type dataUserIdToken is use to pass a client tokenization key\n *\n * @param scriptContext the result of connecting to the context provider\n * @throws an {@link Error} if both dataClientToken and the dataUserIdToken keys are null or undefined\n * @returns strict context if one of the keys are defined\n */ var validateBraintreeAuthorizationData = function(scriptContext) {\n    var _a, _b;\n    if (!((_a = scriptContext === null || scriptContext === void 0 ? void 0 : scriptContext.options) === null || _a === void 0 ? void 0 : _a[SDK_SETTINGS.DATA_CLIENT_TOKEN]) && !((_b = scriptContext === null || scriptContext === void 0 ? void 0 : scriptContext.options) === null || _b === void 0 ? void 0 : _b[SDK_SETTINGS.DATA_USER_ID_TOKEN])) {\n        throw new Error(EMPTY_BRAINTREE_AUTHORIZATION_ERROR_MESSAGE);\n    }\n    return scriptContext;\n};\n/**\n * Custom hook to get access to the Script context and\n * dispatch actions to modify the state on the {@link ScriptProvider} component\n *\n * @returns a tuple containing the state of the context and\n * a dispatch function to modify the state\n */ function usePayPalScriptReducer() {\n    var scriptContext = validateReducer((0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ScriptContext));\n    var derivedStatusContext = __assign(__assign({}, scriptContext), {\n        isInitial: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.INITIAL,\n        isPending: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.PENDING,\n        isResolved: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.RESOLVED,\n        isRejected: scriptContext.loadingStatus === SCRIPT_LOADING_STATE.REJECTED\n    });\n    return [\n        derivedStatusContext,\n        scriptContext.dispatch\n    ];\n}\n/**\n * Custom hook to get access to the ScriptProvider context\n *\n * @returns the latest state of the context\n */ function useScriptProviderContext() {\n    var scriptContext = validateBraintreeAuthorizationData(validateReducer((0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ScriptContext)));\n    return [\n        scriptContext,\n        scriptContext.dispatch\n    ];\n}\n// Create the React context to use in the PayPal hosted fields provider\nvar PayPalHostedFieldsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n/**\n * Custom hook to get access to the PayPal Hosted Fields instance.\n * The instance represent the returned object after the render process\n * With this object a user can submit the fields and dynamically modify the cards\n *\n * @returns the hosted fields instance if is available in the component\n */ function usePayPalHostedFields() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PayPalHostedFieldsContext);\n}\nfunction useProxyProps(props) {\n    var proxyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Proxy({}, {\n        get: function(target, prop, receiver) {\n            /**\n       *\n       * If target[prop] is a function, return a function that accesses\n       * this function off the target object. We can mutate the target with\n       * new copies of this function without having to re-render the\n       * SDK components to pass new callbacks.\n       *\n       * */ if (typeof target[prop] === \"function\") {\n                return function() {\n                    var args = [];\n                    for(var _i = 0; _i < arguments.length; _i++){\n                        args[_i] = arguments[_i];\n                    }\n                    // eslint-disable-next-line @typescript-eslint/ban-types\n                    return target[prop].apply(target, args);\n                };\n            }\n            return Reflect.get(target, prop, receiver);\n        }\n    }));\n    proxyRef.current = Object.assign(proxyRef.current, props);\n    return proxyRef.current;\n}\n/**\nThis `<PayPalButtons />` component supports rendering [buttons](https://developer.paypal.com/docs/business/javascript-sdk/javascript-sdk-reference/#buttons) for PayPal, Venmo, and alternative payment methods.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n*/ var PayPalButtons = function(_a) {\n    var _b;\n    var _c = _a.className, className = _c === void 0 ? \"\" : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, children = _a.children, _e = _a.forceReRender, forceReRender = _e === void 0 ? [] : _e, buttonProps = __rest$1(_a, [\n        \"className\",\n        \"disabled\",\n        \"children\",\n        \"forceReRender\"\n    ]);\n    var isDisabledStyle = disabled ? {\n        opacity: 0.38\n    } : {};\n    var classNames = \"\".concat(className, \" \").concat(disabled ? \"paypal-buttons-disabled\" : \"\").trim();\n    var buttonsContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var buttons = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var proxyProps = useProxyProps(buttonProps);\n    var _f = usePayPalScriptReducer()[0], isResolved = _f.isResolved, options = _f.options;\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), initActions = _g[0], setInitActions = _g[1];\n    var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isEligible = _h[0], setIsEligible = _h[1];\n    var _j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _j[1];\n    function closeButtonsComponent() {\n        if (buttons.current !== null) {\n            buttons.current.close().catch(function() {\n            // ignore errors when closing the component\n            });\n        }\n    }\n    if ((_b = buttons.current) === null || _b === void 0 ? void 0 : _b.updateProps) {\n        buttons.current.updateProps({\n            message: buttonProps.message\n        });\n    }\n    // useEffect hook for rendering the buttons\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // verify the sdk script has successfully loaded\n        if (isResolved === false) {\n            return closeButtonsComponent;\n        }\n        var paypalWindowNamespace = getPayPalWindowNamespace$1(options.dataNamespace);\n        // verify dependency on window object\n        if (paypalWindowNamespace === undefined || paypalWindowNamespace.Buttons === undefined) {\n            setErrorState(function() {\n                throw new Error(generateErrorMessage({\n                    reactComponentName: PayPalButtons.displayName,\n                    sdkComponentKey: \"buttons\",\n                    sdkRequestedComponents: options.components,\n                    sdkDataNamespace: options[SDK_SETTINGS.DATA_NAMESPACE]\n                }));\n            });\n            return closeButtonsComponent;\n        }\n        var decoratedOnInit = function(data, actions) {\n            setInitActions(actions);\n            if (typeof buttonProps.onInit === \"function\") {\n                buttonProps.onInit(data, actions);\n            }\n        };\n        try {\n            buttons.current = paypalWindowNamespace.Buttons(__assign(__assign({}, proxyProps), {\n                onInit: decoratedOnInit\n            }));\n        } catch (err) {\n            return setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalButtons /> component. Failed to initialize:  \".concat(err));\n            });\n        }\n        // only render the button when eligible\n        if (buttons.current.isEligible() === false) {\n            setIsEligible(false);\n            return closeButtonsComponent;\n        }\n        if (!buttonsContainerRef.current) {\n            return closeButtonsComponent;\n        }\n        buttons.current.render(buttonsContainerRef.current).catch(function(err) {\n            // component failed to render, possibly because it was closed or destroyed.\n            if (buttonsContainerRef.current === null || buttonsContainerRef.current.children.length === 0) {\n                // paypal buttons container is no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // paypal buttons container is still in the DOM\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalButtons /> component. \".concat(err));\n            });\n        });\n        return closeButtonsComponent;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, __spreadArray(__spreadArray([\n        isResolved\n    ], forceReRender, true), [\n        buttonProps.fundingSource\n    ], false));\n    // useEffect hook for managing disabled state\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (initActions === null) {\n            return;\n        }\n        if (disabled === true) {\n            initActions.disable().catch(function() {\n            // ignore errors when disabling the component\n            });\n        } else {\n            initActions.enable().catch(function() {\n            // ignore errors when enabling the component\n            });\n        }\n    }, [\n        disabled,\n        initActions\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, isEligible ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: buttonsContainerRef,\n        style: isDisabledStyle,\n        className: classNames\n    }) : children);\n};\nPayPalButtons.displayName = \"PayPalButtons\";\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction findScript(url, attributes) {\n    var currentScript = document.querySelector('script[src=\"'.concat(url, '\"]'));\n    if (currentScript === null) return null;\n    var nextScript = createScriptElement(url, attributes);\n    var currentScriptClone = currentScript.cloneNode();\n    delete currentScriptClone.dataset.uidAuto;\n    if (Object.keys(currentScriptClone.dataset).length !== Object.keys(nextScript.dataset).length) {\n        return null;\n    }\n    var isExactMatch = true;\n    Object.keys(currentScriptClone.dataset).forEach(function(key) {\n        if (currentScriptClone.dataset[key] !== nextScript.dataset[key]) {\n            isExactMatch = false;\n        }\n    });\n    return isExactMatch ? currentScript : null;\n}\nfunction insertScriptElement(_a) {\n    var url = _a.url, attributes = _a.attributes, onSuccess = _a.onSuccess, onError = _a.onError;\n    var newScript = createScriptElement(url, attributes);\n    newScript.onerror = onError;\n    newScript.onload = onSuccess;\n    document.head.insertBefore(newScript, document.head.firstElementChild);\n}\nfunction processOptions(_a) {\n    var customSdkBaseUrl = _a.sdkBaseUrl, environment = _a.environment, options = __rest(_a, [\n        \"sdkBaseUrl\",\n        \"environment\"\n    ]);\n    var sdkBaseUrl = customSdkBaseUrl || processSdkBaseUrl(environment);\n    var optionsWithStringIndex = options;\n    var _b = Object.keys(optionsWithStringIndex).filter(function(key) {\n        return typeof optionsWithStringIndex[key] !== \"undefined\" && optionsWithStringIndex[key] !== null && optionsWithStringIndex[key] !== \"\";\n    }).reduce(function(accumulator, key) {\n        var value = optionsWithStringIndex[key].toString();\n        key = camelCaseToKebabCase(key);\n        if (key.substring(0, 4) === \"data\" || key === \"crossorigin\") {\n            accumulator.attributes[key] = value;\n        } else {\n            accumulator.queryParams[key] = value;\n        }\n        return accumulator;\n    }, {\n        queryParams: {},\n        attributes: {}\n    }), queryParams = _b.queryParams, attributes = _b.attributes;\n    if (queryParams[\"merchant-id\"] && queryParams[\"merchant-id\"].indexOf(\",\") !== -1) {\n        attributes[\"data-merchant-id\"] = queryParams[\"merchant-id\"];\n        queryParams[\"merchant-id\"] = \"*\";\n    }\n    return {\n        url: \"\".concat(sdkBaseUrl, \"?\").concat(objectToQueryString(queryParams)),\n        attributes: attributes\n    };\n}\nfunction camelCaseToKebabCase(str) {\n    var replacer = function(match, indexOfMatch) {\n        return (indexOfMatch ? \"-\" : \"\") + match.toLowerCase();\n    };\n    return str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, replacer);\n}\nfunction objectToQueryString(params) {\n    var queryString = \"\";\n    Object.keys(params).forEach(function(key) {\n        if (queryString.length !== 0) queryString += \"&\";\n        queryString += key + \"=\" + params[key];\n    });\n    return queryString;\n}\nfunction processSdkBaseUrl(environment) {\n    return environment === \"sandbox\" ? \"https://www.sandbox.paypal.com/sdk/js\" : \"https://www.paypal.com/sdk/js\";\n}\nfunction createScriptElement(url, attributes) {\n    if (attributes === void 0) {\n        attributes = {};\n    }\n    var newScript = document.createElement(\"script\");\n    newScript.src = url;\n    Object.keys(attributes).forEach(function(key) {\n        newScript.setAttribute(key, attributes[key]);\n        if (key === \"data-csp-nonce\") {\n            newScript.setAttribute(\"nonce\", attributes[\"data-csp-nonce\"]);\n        }\n    });\n    return newScript;\n}\nfunction loadScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) {\n        PromisePonyfill = Promise;\n    }\n    validateArguments(options, PromisePonyfill);\n    if (typeof document === \"undefined\") return PromisePonyfill.resolve(null);\n    var _a = processOptions(options), url = _a.url, attributes = _a.attributes;\n    var namespace = attributes[\"data-namespace\"] || \"paypal\";\n    var existingWindowNamespace = getPayPalWindowNamespace(namespace);\n    if (!attributes[\"data-js-sdk-library\"]) {\n        attributes[\"data-js-sdk-library\"] = \"paypal-js\";\n    }\n    if (findScript(url, attributes) && existingWindowNamespace) {\n        return PromisePonyfill.resolve(existingWindowNamespace);\n    }\n    return loadCustomScript({\n        url: url,\n        attributes: attributes\n    }, PromisePonyfill).then(function() {\n        var newWindowNamespace = getPayPalWindowNamespace(namespace);\n        if (newWindowNamespace) {\n            return newWindowNamespace;\n        }\n        throw new Error(\"The window.\".concat(namespace, \" global variable is not available.\"));\n    });\n}\nfunction loadCustomScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) {\n        PromisePonyfill = Promise;\n    }\n    validateArguments(options, PromisePonyfill);\n    var url = options.url, attributes = options.attributes;\n    if (typeof url !== \"string\" || url.length === 0) {\n        throw new Error(\"Invalid url.\");\n    }\n    if (typeof attributes !== \"undefined\" && typeof attributes !== \"object\") {\n        throw new Error(\"Expected attributes to be an object.\");\n    }\n    return new PromisePonyfill(function(resolve, reject) {\n        if (typeof document === \"undefined\") return resolve();\n        insertScriptElement({\n            url: url,\n            attributes: attributes,\n            onSuccess: function() {\n                return resolve();\n            },\n            onError: function() {\n                var defaultError = new Error('The script \"'.concat(url, '\" failed to load. Check the HTTP status code and response body in DevTools to learn more.'));\n                return reject(defaultError);\n            }\n        });\n    });\n}\nfunction getPayPalWindowNamespace(namespace) {\n    return window[namespace];\n}\nfunction validateArguments(options, PromisePonyfill) {\n    if (typeof options !== \"object\" || options === null) {\n        throw new Error(\"Expected an options object.\");\n    }\n    var environment = options.environment;\n    if (environment && environment !== \"production\" && environment !== \"sandbox\") {\n        throw new Error('The `environment` option must be either \"production\" or \"sandbox\".');\n    }\n    if (typeof PromisePonyfill !== \"undefined\" && typeof PromisePonyfill !== \"function\") {\n        throw new Error(\"Expected PromisePonyfill to be a function.\");\n    }\n}\n/**\n * Simple check to determine if the Braintree is a valid namespace.\n *\n * @param braintreeSource the source {@link BraintreeNamespace}\n * @returns a boolean representing if the namespace is valid.\n */ var isValidBraintreeNamespace = function(braintreeSource) {\n    var _a, _b;\n    if (typeof ((_a = braintreeSource === null || braintreeSource === void 0 ? void 0 : braintreeSource.client) === null || _a === void 0 ? void 0 : _a.create) !== \"function\" && typeof ((_b = braintreeSource === null || braintreeSource === void 0 ? void 0 : braintreeSource.paypalCheckout) === null || _b === void 0 ? void 0 : _b.create) !== \"function\") {\n        throw new Error(\"The braintreeNamespace property is not a valid BraintreeNamespace type.\");\n    }\n    return true;\n};\n/**\n * Use `actions.braintree` to provide an interface for the paypalCheckoutInstance\n * through the createOrder, createBillingAgreement and onApprove callbacks\n *\n * @param braintreeButtonProps the component button options\n * @returns a new copy of the component button options casted as {@link PayPalButtonsComponentProps}\n */ var decorateActions = function(buttonProps, payPalCheckoutInstance) {\n    var createOrderRef = buttonProps.createOrder;\n    var createBillingAgreementRef = buttonProps.createBillingAgreement;\n    var onApproveRef = buttonProps.onApprove;\n    if (typeof createOrderRef === \"function\") {\n        buttonProps.createOrder = function(data, actions) {\n            return createOrderRef(data, __assign(__assign({}, actions), {\n                braintree: payPalCheckoutInstance\n            }));\n        };\n    }\n    if (typeof createBillingAgreementRef === \"function\") {\n        buttonProps.createBillingAgreement = function(data, actions) {\n            return createBillingAgreementRef(data, __assign(__assign({}, actions), {\n                braintree: payPalCheckoutInstance\n            }));\n        };\n    }\n    if (typeof onApproveRef === \"function\") {\n        buttonProps.onApprove = function(data, actions) {\n            return onApproveRef(data, __assign(__assign({}, actions), {\n                braintree: payPalCheckoutInstance\n            }));\n        };\n    }\n    return __assign({}, buttonProps);\n};\n/**\n * Get the Braintree namespace from the component props.\n * If the prop `braintreeNamespace` is undefined will try to load it from the CDN.\n * This function allows users to set the braintree manually on the `BraintreePayPalButtons` component.\n *\n * Use case can be for example legacy sites using AMD/UMD modules,\n * trying to integrate the `BraintreePayPalButtons` component.\n * If we attempt to load the Braintree from the CDN won't define the braintree namespace.\n * This happens because the braintree script is an UMD module.\n * After detecting the AMD on the global scope will create an anonymous module using `define`\n * and the `BraintreePayPalButtons` won't be able to get access to the `window.braintree` namespace\n * from the global context.\n *\n * @param braintreeSource the source {@link BraintreeNamespace}\n * @returns the {@link BraintreeNamespace}\n */ var getBraintreeNamespace = function(braintreeSource) {\n    if (braintreeSource && isValidBraintreeNamespace(braintreeSource)) {\n        return Promise.resolve(braintreeSource);\n    }\n    return Promise.all([\n        loadCustomScript({\n            url: BRAINTREE_SOURCE\n        }),\n        loadCustomScript({\n            url: BRAINTREE_PAYPAL_CHECKOUT_SOURCE\n        })\n    ]).then(function() {\n        return getBraintreeWindowNamespace();\n    });\n};\n/**\nThis `<BraintreePayPalButtons />` component renders the [Braintree PayPal Buttons](https://developer.paypal.com/braintree/docs/guides/paypal/overview) for Braintree Merchants.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n\nNote: You are able to make your integration using the client token or using the tokenization key.\n\n- To use the client token integration set the key `dataClientToken` in the `PayPayScriptProvider` component's options.\n- To use the tokenization key integration set the key `dataUserIdToken` in the `PayPayScriptProvider` component's options.\n*/ var BraintreePayPalButtons = function(_a) {\n    var _b = _a.className, className = _b === void 0 ? \"\" : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, children = _a.children, _d = _a.forceReRender, forceReRender = _d === void 0 ? [] : _d, braintreeNamespace = _a.braintreeNamespace, merchantAccountId = _a.merchantAccountId, buttonProps = __rest$1(_a, [\n        \"className\",\n        \"disabled\",\n        \"children\",\n        \"forceReRender\",\n        \"braintreeNamespace\",\n        \"merchantAccountId\"\n    ]);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    var _f = useScriptProviderContext(), providerContext = _f[0], dispatch = _f[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        getBraintreeNamespace(braintreeNamespace).then(function(braintree) {\n            var clientTokenizationKey = providerContext.options[SDK_SETTINGS.DATA_USER_ID_TOKEN];\n            var clientToken = providerContext.options[SDK_SETTINGS.DATA_CLIENT_TOKEN];\n            return braintree.client.create({\n                authorization: clientTokenizationKey || clientToken\n            }).then(function(clientInstance) {\n                var merchantProp = merchantAccountId ? {\n                    merchantAccountId: merchantAccountId\n                } : {};\n                return braintree.paypalCheckout.create(__assign(__assign({}, merchantProp), {\n                    client: clientInstance\n                }));\n            }).then(function(paypalCheckoutInstance) {\n                dispatch({\n                    type: DISPATCH_ACTION.SET_BRAINTREE_INSTANCE,\n                    value: paypalCheckoutInstance\n                });\n            });\n        }).catch(function(err) {\n            setErrorState(function() {\n                throw new Error(\"\".concat(LOAD_SCRIPT_ERROR, \" \").concat(err));\n            });\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        providerContext.options\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, providerContext.braintreePayPalCheckoutInstance && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalButtons, __assign({\n        className: className,\n        disabled: disabled,\n        forceReRender: forceReRender\n    }, decorateActions(buttonProps, providerContext.braintreePayPalCheckoutInstance)), children));\n};\n/**\nThe `<PayPalMarks />` component is used for conditionally rendering different payment options using radio buttons.\nThe [Display PayPal Buttons with other Payment Methods guide](https://developer.paypal.com/docs/business/checkout/add-capabilities/buyer-experience/#display-paypal-buttons-with-other-payment-methods) describes this style of integration in detail.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n\nThis component can also be configured to use a single funding source similar to the [standalone buttons](https://developer.paypal.com/docs/business/checkout/configure-payments/standalone-buttons/) approach.\nA `FUNDING` object is exported by this library which has a key for every available funding source option.\n*/ var PayPalMarks = function(_a) {\n    var _b = _a.className, className = _b === void 0 ? \"\" : _b, children = _a.children, markProps = __rest$1(_a, [\n        \"className\",\n        \"children\"\n    ]);\n    var _c = usePayPalScriptReducer()[0], isResolved = _c.isResolved, options = _c.options;\n    var markContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isEligible = _d[0], setIsEligible = _d[1];\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    /**\n   * Render PayPal Mark into the DOM\n   */ var renderPayPalMark = function(mark) {\n        var current = markContainerRef.current;\n        // only render the mark when eligible\n        if (!current || !mark.isEligible()) {\n            return setIsEligible(false);\n        }\n        // Remove any children before render it again\n        if (current.firstChild) {\n            current.removeChild(current.firstChild);\n        }\n        mark.render(current).catch(function(err) {\n            // component failed to render, possibly because it was closed or destroyed.\n            if (current === null || current.children.length === 0) {\n                // paypal marks container is no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // paypal marks container is still in the DOM\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalMarks /> component. \".concat(err));\n            });\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // verify the sdk script has successfully loaded\n        if (isResolved === false) {\n            return;\n        }\n        var paypalWindowNamespace = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE]);\n        // verify dependency on window object\n        if (paypalWindowNamespace === undefined || paypalWindowNamespace.Marks === undefined) {\n            return setErrorState(function() {\n                throw new Error(generateErrorMessage({\n                    reactComponentName: PayPalMarks.displayName,\n                    sdkComponentKey: \"marks\",\n                    sdkRequestedComponents: options.components,\n                    sdkDataNamespace: options[SDK_SETTINGS.DATA_NAMESPACE]\n                }));\n            });\n        }\n        renderPayPalMark(paypalWindowNamespace.Marks(__assign({}, markProps)));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isResolved,\n        markProps.fundingSource\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, isEligible ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: markContainerRef,\n        className: className\n    }) : children);\n};\nPayPalMarks.displayName = \"PayPalMarks\";\n/**\nThis `<PayPalMessages />` messages component renders a credit messaging on upstream merchant sites.\nIt relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.\n*/ var PayPalMessages = function(_a) {\n    var _b = _a.className, className = _b === void 0 ? \"\" : _b, _c = _a.forceReRender, forceReRender = _c === void 0 ? [] : _c, messageProps = __rest$1(_a, [\n        \"className\",\n        \"forceReRender\"\n    ]);\n    var _d = usePayPalScriptReducer()[0], isResolved = _d.isResolved, options = _d.options;\n    var messagesContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var messages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // verify the sdk script has successfully loaded\n        if (isResolved === false) {\n            return;\n        }\n        var paypalWindowNamespace = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE]);\n        // verify dependency on window object\n        if (paypalWindowNamespace === undefined || paypalWindowNamespace.Messages === undefined) {\n            return setErrorState(function() {\n                throw new Error(generateErrorMessage({\n                    reactComponentName: PayPalMessages.displayName,\n                    sdkComponentKey: \"messages\",\n                    sdkRequestedComponents: options.components,\n                    sdkDataNamespace: options[SDK_SETTINGS.DATA_NAMESPACE]\n                }));\n            });\n        }\n        messages.current = paypalWindowNamespace.Messages(__assign({}, messageProps));\n        messages.current.render(messagesContainerRef.current).catch(function(err) {\n            // component failed to render, possibly because it was closed or destroyed.\n            if (messagesContainerRef.current === null || messagesContainerRef.current.children.length === 0) {\n                // paypal messages container is no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // paypal messages container is still in the DOM\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalMessages /> component. \".concat(err));\n            });\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, __spreadArray([\n        isResolved\n    ], forceReRender, true));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: messagesContainerRef,\n        className: className\n    });\n};\nPayPalMessages.displayName = \"PayPalMessages\";\n/**\nThis `<PayPalScriptProvider />` component takes care of loading the JS SDK `<script>`.\nIt manages state for script loading so children components like `<PayPalButtons />` know when it's safe to use the `window.paypal` global namespace.\n\nNote: You always should use this component as a wrapper for  `PayPalButtons`, `PayPalMarks`, `PayPalMessages` and `BraintreePayPalButtons` components.\n */ var PayPalScriptProvider = function(_a) {\n    var _b;\n    var _c = _a.options, options = _c === void 0 ? {\n        clientId: \"test\"\n    } : _c, children = _a.children, _d = _a.deferLoading, deferLoading = _d === void 0 ? false : _d;\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(scriptReducer, {\n        options: __assign(__assign({}, options), (_b = {}, _b[SDK_SETTINGS.DATA_JS_SDK_LIBRARY] = SDK_SETTINGS.DATA_LIBRARY_VALUE, _b[SDK_SETTINGS.DATA_SDK_INTEGRATION_SOURCE] = SDK_SETTINGS.DATA_LIBRARY_VALUE, _b[SCRIPT_ID] = \"\".concat(getScriptID(options)), _b)),\n        loadingStatus: deferLoading ? SCRIPT_LOADING_STATE.INITIAL : SCRIPT_LOADING_STATE.PENDING\n    }), state = _e[0], dispatch = _e[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (deferLoading === false && state.loadingStatus === SCRIPT_LOADING_STATE.INITIAL) {\n            return dispatch({\n                type: DISPATCH_ACTION.LOADING_STATUS,\n                value: SCRIPT_LOADING_STATE.PENDING\n            });\n        }\n        if (state.loadingStatus !== SCRIPT_LOADING_STATE.PENDING) {\n            return;\n        }\n        var isSubscribed = true;\n        loadScript(state.options).then(function() {\n            if (isSubscribed) {\n                dispatch({\n                    type: DISPATCH_ACTION.LOADING_STATUS,\n                    value: SCRIPT_LOADING_STATE.RESOLVED\n                });\n            }\n        }).catch(function(err) {\n            console.error(\"\".concat(LOAD_SCRIPT_ERROR, \" \").concat(err));\n            if (isSubscribed) {\n                dispatch({\n                    type: DISPATCH_ACTION.LOADING_STATUS,\n                    value: {\n                        state: SCRIPT_LOADING_STATE.REJECTED,\n                        message: String(err)\n                    }\n                });\n            }\n        });\n        return function() {\n            isSubscribed = false;\n        };\n    }, [\n        state.options,\n        deferLoading,\n        state.loadingStatus\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ScriptContext.Provider, {\n        value: __assign(__assign({}, state), {\n            dispatch: dispatch\n        })\n    }, children);\n};\n/**\n * Custom hook to store registered hosted fields children\n * Each `PayPalHostedField` component should be registered on the parent provider\n *\n * @param initialValue the initially registered components\n * @returns at first, an {@link Object} containing the registered hosted fields,\n * and at the second a function handler to register the hosted fields components\n */ var useHostedFieldsRegister = function(initialValue) {\n    if (initialValue === void 0) {\n        initialValue = {};\n    }\n    var registeredFields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialValue);\n    var registerHostedField = function(component) {\n        registeredFields.current = __assign(__assign({}, registeredFields.current), component);\n    };\n    return [\n        registeredFields,\n        registerHostedField\n    ];\n};\n/**\n * Throw an exception if the HostedFields is not found in the paypal namespace\n * Probably cause for this problem is not sending the hosted-fields string\n * as part of the components props in options\n * {@code <PayPalScriptProvider options={{ components: 'hosted-fields'}}>}\n *\n * @param param0 and object containing the components and namespace defined in options\n * @throws {@code Error}\n *\n */ var generateMissingHostedFieldsError = function(_a) {\n    var _b = _a.components, components = _b === void 0 ? \"\" : _b, _c = SDK_SETTINGS.DATA_NAMESPACE, _d = _a[_c], dataNamespace = _d === void 0 ? DEFAULT_PAYPAL_NAMESPACE : _d;\n    var expectedComponents = components ? \"\".concat(components, \",hosted-fields\") : \"hosted-fields\";\n    var errorMessage = \"Unable to render <PayPalHostedFieldsProvider /> because window.\".concat(dataNamespace, \".HostedFields is undefined.\");\n    if (!components.includes(\"hosted-fields\")) {\n        errorMessage += \"\\nTo fix the issue, add 'hosted-fields' to the list of components passed to the parent PayPalScriptProvider: <PayPalScriptProvider options={{ components: '\".concat(expectedComponents, \"'}}>\");\n    }\n    return errorMessage;\n};\n/**\n * Validate the expiration date component. Valid combinations are:\n * 1- Only the `expirationDate` field exists.\n * 2- Only the `expirationMonth` and `expirationYear` fields exist. Cannot be used with the `expirationDate` field.\n *\n * @param registerTypes\n * @returns @type {true} when the children are valid\n */ var validateExpirationDate = function(registerTypes) {\n    return !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.EXPIRATION_DATE) && !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.EXPIRATION_MONTH) && !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.EXPIRATION_YEAR);\n};\n/**\n * Check if we find the [number, expiration, cvv] in children\n *\n * @param requiredChildren the list with required children [number, expiration, cvv]\n * @param registerTypes    the list of all the children types pass to the parent\n * @throw an @type {Error} when not find the default children\n */ var hasDefaultChildren = function(registerTypes) {\n    if (!registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.NUMBER) || !registerTypes.includes(PAYPAL_HOSTED_FIELDS_TYPES.CVV) || validateExpirationDate(registerTypes)) {\n        throw new Error(HOSTED_FIELDS_CHILDREN_ERROR);\n    }\n};\n/**\n * Check if we don't have duplicate children types\n *\n * @param registerTypes the list of all the children types pass to the parent\n * @throw an @type {Error} when duplicate types was found\n */ var noDuplicateChildren = function(registerTypes) {\n    if (registerTypes.length !== new Set(registerTypes).size) {\n        throw new Error(HOSTED_FIELDS_DUPLICATE_CHILDREN_ERROR);\n    }\n};\n/**\n * Validate the hosted field children in the PayPalHostedFieldsProvider component.\n * These are the rules:\n * 1- We need to find 3 default children for number, expiration, cvv\n * 2- No duplicate children are allowed\n * 3- No invalid combinations of `expirationDate`, `expirationMonth`, and `expirationYear`\n *\n * @param childrenList     the list of children\n * @param requiredChildren the list with required children [number, expiration, cvv]\n */ var validateHostedFieldChildren = function(registeredFields) {\n    hasDefaultChildren(registeredFields);\n    noDuplicateChildren(registeredFields);\n};\n/**\nThis `<PayPalHostedFieldsProvider />` provider component wraps the form field elements and accepts props like `createOrder()`.\n\nThis provider component is designed to be used with the `<PayPalHostedField />` component.\n\nWarning: If you don't see anything in the screen probably your client is ineligible.\nTo handle this problem make sure to use the prop `notEligibleError` and pass a component with a custom message.\nTake a look to this link if that is the case: https://developer.paypal.com/docs/checkout/advanced/integrate/\n*/ var PayPalHostedFieldsProvider = function(_a) {\n    var styles = _a.styles, createOrder = _a.createOrder, notEligibleError = _a.notEligibleError, children = _a.children, installments = _a.installments;\n    var _b = useScriptProviderContext()[0], options = _b.options, loadingStatus = _b.loadingStatus;\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isEligible = _c[0], setIsEligible = _c[1];\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), cardFields = _d[0], setCardFields = _d[1];\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setErrorState = _e[1];\n    var hostedFieldsContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var hostedFields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var _f = useHostedFieldsRegister(), registeredFields = _f[0], registerHostedField = _f[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a;\n        validateHostedFieldChildren(Object.keys(registeredFields.current));\n        // Only render the hosted fields when script is loaded and hostedFields is eligible\n        if (!(loadingStatus === SCRIPT_LOADING_STATE.RESOLVED)) {\n            return;\n        }\n        // Get the hosted fields from the [window.paypal.HostedFields] SDK\n        hostedFields.current = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE]).HostedFields;\n        if (!hostedFields.current) {\n            throw new Error(generateMissingHostedFieldsError((_a = {\n                components: options.components\n            }, _a[SDK_SETTINGS.DATA_NAMESPACE] = options[SDK_SETTINGS.DATA_NAMESPACE], _a)));\n        }\n        if (!hostedFields.current.isEligible()) {\n            return setIsEligible(false);\n        }\n        // Clean all the fields before the rerender\n        if (cardFields) {\n            cardFields.teardown();\n        }\n        hostedFields.current.render({\n            // Call your server to set up the transaction\n            createOrder: createOrder,\n            fields: registeredFields.current,\n            installments: installments,\n            styles: styles\n        }).then(function(cardFieldsInstance) {\n            if (hostedFieldsContainerRef.current) {\n                setCardFields(cardFieldsInstance);\n            }\n        }).catch(function(err) {\n            setErrorState(function() {\n                throw new Error(\"Failed to render <PayPalHostedFieldsProvider /> component. \".concat(err));\n            });\n        });\n    }, [\n        loadingStatus,\n        styles\n    ]); // eslint-disable-line react-hooks/exhaustive-deps\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: hostedFieldsContainerRef\n    }, isEligible ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalHostedFieldsContext.Provider, {\n        value: {\n            cardFields: cardFields,\n            registerHostedField: registerHostedField\n        }\n    }, children) : notEligibleError);\n};\n/**\nThis `<PayPalHostedField />` component renders individual fields for [Hosted Fields](https://developer.paypal.com/docs/business/checkout/advanced-card-payments/integrate#3-add-javascript-sdk-and-card-form) integrations.\nIt relies on the `<PayPalHostedFieldsProvider />` parent component for managing state related to loading the JS SDK script\nand execute some validations before the rendering the fields.\n\nTo use the PayPal hosted fields you need to define at least three fields:\n\n- A card number field\n- The CVV code from the client card\n- The expiration date\n\nYou can define the expiration date as a single field similar to the example below,\nor you are able to define it in [two separate fields](https://paypal.github.io/react-paypal-js//?path=/docs/paypal-paypalhostedfields--expiration-date). One for the month and second for year.\n\nNote: Take care when using multiple instances of the PayPal Hosted Fields on the same page.\nThe component will fail to render when any of the selectors return more than one element.\n*/ var PayPalHostedField = function(_a) {\n    var hostedFieldType = _a.hostedFieldType, // eslint-disable-line @typescript-eslint/no-unused-vars\n    options = _a.options, // eslint-disable-line @typescript-eslint/no-unused-vars\n    props = __rest$1(_a, [\n        \"hostedFieldType\",\n        \"options\"\n    ]);\n    var hostedFieldContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PayPalHostedFieldsContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a;\n        if (!(hostedFieldContext === null || hostedFieldContext === void 0 ? void 0 : hostedFieldContext.registerHostedField)) {\n            throw new Error(\"The HostedField cannot be register in the PayPalHostedFieldsProvider parent component\");\n        }\n        // Register in the parent provider\n        hostedFieldContext.registerHostedField((_a = {}, _a[hostedFieldType] = {\n            selector: options.selector,\n            placeholder: options.placeholder,\n            type: options.type,\n            formatInput: options.formatInput,\n            maskInput: options.maskInput,\n            select: options.select,\n            maxlength: options.maxlength,\n            minlength: options.minlength,\n            prefill: options.prefill,\n            rejectUnsupportedCards: options.rejectUnsupportedCards\n        }, _a));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", __assign({}, props));\n};\n/**\n * Throw an exception if the CardFields is not found in the paypal namespace\n * Probably cause for this problem is not sending the card-fields string\n * as part of the components props in options\n * {@code <PayPalScriptProvider options={{ components: 'card-fields'}}>}\n *\n * @param param0 and object containing the components and namespace defined in options\n * @throws {@code Error}\n *\n */ var generateMissingCardFieldsError = function(_a) {\n    var _b = _a.components, components = _b === void 0 ? \"\" : _b, _c = SDK_SETTINGS.DATA_NAMESPACE, _d = _a[_c], dataNamespace = _d === void 0 ? DEFAULT_PAYPAL_NAMESPACE : _d;\n    var expectedComponents = components ? \"\".concat(components, \",card-fields\") : \"card-fields\";\n    var errorMessage = \"Unable to render <PayPalCardFieldsProvider /> because window.\".concat(dataNamespace, \".CardFields is undefined.\");\n    if (!components.includes(\"card-fields\")) {\n        errorMessage += \"\\nTo fix the issue, add 'card-fields' to the list of components passed to the parent PayPalScriptProvider: <PayPalScriptProvider options={{ components: '\".concat(expectedComponents, \"'}}>\");\n    }\n    return errorMessage;\n};\nfunction ignore() {\n    return;\n}\nfunction hasChildren(container) {\n    var _a;\n    return !!((_a = container.current) === null || _a === void 0 ? void 0 : _a.children.length);\n}\nvar PayPalCardFieldsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    cardFieldsForm: null,\n    fields: {},\n    registerField: ignore,\n    unregisterField: ignore // implementation is inside hook and passed through the provider\n});\nvar usePayPalCardFields = function() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PayPalCardFieldsContext);\n};\nvar usePayPalCardFieldsRegistry = function() {\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setError = _a[1];\n    var registeredFields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    var registerField = function() {\n        var props = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            props[_i] = arguments[_i];\n        }\n        var fieldName = props[0], options = props[1], cardFields = props[2];\n        if (registeredFields.current[fieldName]) {\n            setError(function() {\n                throw new Error(CARD_FIELDS_DUPLICATE_CHILDREN_ERROR);\n            });\n        }\n        registeredFields.current[fieldName] = cardFields === null || cardFields === void 0 ? void 0 : cardFields[fieldName](options);\n        return registeredFields.current[fieldName];\n    };\n    var unregisterField = function(fieldName) {\n        var field = registeredFields.current[fieldName];\n        if (field) {\n            field.close().catch(ignore);\n            delete registeredFields.current[fieldName];\n        }\n    };\n    return {\n        fields: registeredFields.current,\n        registerField: registerField,\n        unregisterField: unregisterField\n    };\n};\nvar FullWidthContainer = function(_a) {\n    var children = _a.children;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            width: \"100%\"\n        }\n    }, children);\n};\n/**\nThe `<PayPalCardFieldsProvider />` is a context provider that is designed to support the rendering and state management of PayPal CardFields in your application.\n\nThe context provider will initialize the `CardFields` instance from the JS SDK and determine eligibility to render the CardField components. Once the `CardFields` are initialized, the context provider will manage the state of the `CardFields` instance as well as the reference to each individual card field.\n\nPassing the `inputEvents` and `style` props to the context provider will apply them to each of the individual field components.\n\nThe state managed by the provider is accessible through our custom hook `usePayPalCardFields`.\n\n*/ var PayPalCardFieldsProvider = function(_a) {\n    var children = _a.children, props = __rest$1(_a, [\n        \"children\"\n    ]);\n    var _b = usePayPalScriptReducer()[0], isResolved = _b.isResolved, options = _b.options;\n    var _c = usePayPalCardFieldsRegistry(), fields = _c.fields, registerField = _c.registerField, unregisterField = _c.unregisterField;\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), cardFieldsForm = _d[0], setCardFieldsForm = _d[1];\n    var cardFieldsInstance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), isEligible = _e[0], setIsEligible = _e[1];\n    // We set the error inside state so that it can be caught by React's error boundary\n    var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setError = _f[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a, _b, _c;\n        if (!isResolved) {\n            return;\n        }\n        try {\n            cardFieldsInstance.current = (_c = (_b = (_a = getPayPalWindowNamespace$1(options[SDK_SETTINGS.DATA_NAMESPACE])).CardFields) === null || _b === void 0 ? void 0 : _b.call(_a, __assign({}, props))) !== null && _c !== void 0 ? _c : null;\n        } catch (error) {\n            setError(function() {\n                throw new Error(\"Failed to render <PayPalCardFieldsProvider /> component. Failed to initialize:  \".concat(error));\n            });\n            return;\n        }\n        if (!cardFieldsInstance.current) {\n            setError(function() {\n                var _a;\n                throw new Error(generateMissingCardFieldsError((_a = {\n                    components: options.components\n                }, _a[SDK_SETTINGS.DATA_NAMESPACE] = options[SDK_SETTINGS.DATA_NAMESPACE], _a)));\n            });\n            return;\n        }\n        setIsEligible(cardFieldsInstance.current.isEligible());\n        setCardFieldsForm(cardFieldsInstance.current);\n        return function() {\n            setCardFieldsForm(null);\n            cardFieldsInstance.current = null;\n        };\n    }, [\n        isResolved\n    ]); // eslint-disable-line react-hooks/exhaustive-deps\n    if (!isEligible) {\n        // TODO: What should be returned here?\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FullWidthContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardFieldsContext.Provider, {\n        value: {\n            cardFieldsForm: cardFieldsForm,\n            fields: fields,\n            registerField: registerField,\n            unregisterField: unregisterField\n        }\n    }, children));\n};\nvar PayPalCardField = function(_a) {\n    var className = _a.className, fieldName = _a.fieldName, options = __rest$1(_a, [\n        \"className\",\n        \"fieldName\"\n    ]);\n    var _b = usePayPalCardFields(), cardFieldsForm = _b.cardFieldsForm, registerField = _b.registerField, unregisterField = _b.unregisterField;\n    var containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Set errors is state so that they can be caught by React's error boundary\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), setError = _c[1];\n    function closeComponent() {\n        unregisterField(fieldName);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!cardFieldsForm) {\n            setError(function() {\n                throw new Error(CARD_FIELDS_CONTEXT_ERROR);\n            });\n            return closeComponent;\n        }\n        if (!containerRef.current) {\n            return closeComponent;\n        }\n        var registeredField = registerField(fieldName, options, cardFieldsForm);\n        registeredField === null || registeredField === void 0 ? void 0 : registeredField.render(containerRef.current).catch(function(err) {\n            if (!hasChildren(containerRef)) {\n                // Component no longer in the DOM, we can safely ignore the error\n                return;\n            }\n            // Component is still in the DOM\n            setError(function() {\n                throw new Error(\"Failed to render <PayPal\".concat(fieldName, \" /> component. \").concat(err));\n            });\n        });\n        return closeComponent;\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: containerRef,\n        className: className\n    });\n};\nvar PayPalNameField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"NameField\"\n    }, options));\n};\nvar PayPalNumberField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"NumberField\"\n    }, options));\n};\nvar PayPalExpiryField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"ExpiryField\"\n    }, options));\n};\nvar PayPalCVVField = function(options) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, __assign({\n        fieldName: \"CVVField\"\n    }, options));\n};\nvar FlexContainer = function(_a) {\n    var children = _a.children;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            width: \"100%\"\n        }\n    }, children);\n};\n/**\nThis `<PayPalCardFieldsForm />` component renders the 4 individual fields for [Card Fields](https://developer.paypal.com/docs/business/checkout/advanced-card-payments/integrate#3-add-javascript-sdk-and-card-form) integrations.\nThis setup relies on the `<PayPalCardFieldsProvider />` parent component, which manages the state related to loading the JS SDK script and performs certain validations before rendering the fields.\n\n\n\nNote: If you want to have more granular control over the layout of how the fields are rendered, you can alternatively use our Individual Fields.\n*/ var PayPalCardFieldsForm = function(_a) {\n    var className = _a.className;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: className\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"NameField\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"NumberField\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FlexContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FullWidthContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"ExpiryField\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FullWidthContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PayPalCardField, {\n        fieldName: \"CVVField\"\n    }))));\n};\nvar FUNDING$1 = {\n    PAYPAL: \"paypal\",\n    VENMO: \"venmo\",\n    APPLEPAY: \"applepay\",\n    ITAU: \"itau\",\n    CREDIT: \"credit\",\n    PAYLATER: \"paylater\",\n    CARD: \"card\",\n    IDEAL: \"ideal\",\n    SEPA: \"sepa\",\n    BANCONTACT: \"bancontact\",\n    GIROPAY: \"giropay\",\n    SOFORT: \"sofort\",\n    EPS: \"eps\",\n    MYBANK: \"mybank\",\n    P24: \"p24\",\n    PAYU: \"payu\",\n    BLIK: \"blik\",\n    TRUSTLY: \"trustly\",\n    OXXO: \"oxxo\",\n    BOLETO: \"boleto\",\n    BOLETOBANCARIO: \"boletobancario\",\n    WECHATPAY: \"wechatpay\",\n    MERCADOPAGO: \"mercadopago\",\n    MULTIBANCO: \"multibanco\",\n    SATISPAY: \"satispay\",\n    PAIDY: \"paidy\",\n    ZIMPLER: \"zimpler\",\n    MAXIMA: \"maxima\"\n};\n[\n    FUNDING$1.IDEAL,\n    FUNDING$1.BANCONTACT,\n    FUNDING$1.GIROPAY,\n    FUNDING$1.SOFORT,\n    FUNDING$1.EPS,\n    FUNDING$1.MYBANK,\n    FUNDING$1.P24,\n    FUNDING$1.PAYU,\n    FUNDING$1.BLIK,\n    FUNDING$1.TRUSTLY,\n    FUNDING$1.OXXO,\n    FUNDING$1.BOLETO,\n    FUNDING$1.BOLETOBANCARIO,\n    FUNDING$1.WECHATPAY,\n    FUNDING$1.MERCADOPAGO,\n    FUNDING$1.MULTIBANCO,\n    FUNDING$1.SATISPAY,\n    FUNDING$1.PAIDY,\n    FUNDING$1.MAXIMA,\n    FUNDING$1.ZIMPLER\n];\n// We do not re-export `FUNDING` from the `sdk-constants` module\n// directly because it has no type definitions.\n//\n// See https://github.com/paypal/react-paypal-js/issues/125\nvar FUNDING = FUNDING$1;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@paypal/react-paypal-js/dist/esm/react-paypal-js.js\n");

/***/ })

};
;